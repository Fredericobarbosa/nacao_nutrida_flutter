
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model alimento
 * 
 */
export type alimento = $Result.DefaultSelection<Prisma.$alimentoPayload>
/**
 * Model campanha
 * 
 */
export type campanha = $Result.DefaultSelection<Prisma.$campanhaPayload>
/**
 * Model alimento_campanha
 * 
 */
export type alimento_campanha = $Result.DefaultSelection<Prisma.$alimento_campanhaPayload>
/**
 * Model usuario
 * 
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model alimento_doacao
 * 
 */
export type alimento_doacao = $Result.DefaultSelection<Prisma.$alimento_doacaoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Alimentos
 * const alimentos = await prisma.alimento.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Alimentos
   * const alimentos = await prisma.alimento.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.alimento`: Exposes CRUD operations for the **alimento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alimentos
    * const alimentos = await prisma.alimento.findMany()
    * ```
    */
  get alimento(): Prisma.alimentoDelegate<ExtArgs>;

  /**
   * `prisma.campanha`: Exposes CRUD operations for the **campanha** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campanhas
    * const campanhas = await prisma.campanha.findMany()
    * ```
    */
  get campanha(): Prisma.campanhaDelegate<ExtArgs>;

  /**
   * `prisma.alimento_campanha`: Exposes CRUD operations for the **alimento_campanha** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alimento_campanhas
    * const alimento_campanhas = await prisma.alimento_campanha.findMany()
    * ```
    */
  get alimento_campanha(): Prisma.alimento_campanhaDelegate<ExtArgs>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.alimento_doacao`: Exposes CRUD operations for the **alimento_doacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alimento_doacaos
    * const alimento_doacaos = await prisma.alimento_doacao.findMany()
    * ```
    */
  get alimento_doacao(): Prisma.alimento_doacaoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    alimento: 'alimento',
    campanha: 'campanha',
    alimento_campanha: 'alimento_campanha',
    usuario: 'usuario',
    alimento_doacao: 'alimento_doacao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "alimento" | "campanha" | "alimento_campanha" | "usuario" | "alimento_doacao"
      txIsolationLevel: never
    }
    model: {
      alimento: {
        payload: Prisma.$alimentoPayload<ExtArgs>
        fields: Prisma.alimentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.alimentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.alimentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload>
          }
          findFirst: {
            args: Prisma.alimentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.alimentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload>
          }
          findMany: {
            args: Prisma.alimentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload>[]
          }
          create: {
            args: Prisma.alimentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload>
          }
          createMany: {
            args: Prisma.alimentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.alimentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload>
          }
          update: {
            args: Prisma.alimentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload>
          }
          deleteMany: {
            args: Prisma.alimentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.alimentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.alimentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimentoPayload>
          }
          aggregate: {
            args: Prisma.AlimentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlimento>
          }
          groupBy: {
            args: Prisma.alimentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlimentoGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.alimentoFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.alimentoAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.alimentoCountArgs<ExtArgs>
            result: $Utils.Optional<AlimentoCountAggregateOutputType> | number
          }
        }
      }
      campanha: {
        payload: Prisma.$campanhaPayload<ExtArgs>
        fields: Prisma.campanhaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.campanhaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.campanhaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload>
          }
          findFirst: {
            args: Prisma.campanhaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.campanhaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload>
          }
          findMany: {
            args: Prisma.campanhaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload>[]
          }
          create: {
            args: Prisma.campanhaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload>
          }
          createMany: {
            args: Prisma.campanhaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.campanhaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload>
          }
          update: {
            args: Prisma.campanhaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload>
          }
          deleteMany: {
            args: Prisma.campanhaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.campanhaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.campanhaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$campanhaPayload>
          }
          aggregate: {
            args: Prisma.CampanhaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampanha>
          }
          groupBy: {
            args: Prisma.campanhaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampanhaGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.campanhaFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.campanhaAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.campanhaCountArgs<ExtArgs>
            result: $Utils.Optional<CampanhaCountAggregateOutputType> | number
          }
        }
      }
      alimento_campanha: {
        payload: Prisma.$alimento_campanhaPayload<ExtArgs>
        fields: Prisma.alimento_campanhaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.alimento_campanhaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.alimento_campanhaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload>
          }
          findFirst: {
            args: Prisma.alimento_campanhaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.alimento_campanhaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload>
          }
          findMany: {
            args: Prisma.alimento_campanhaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload>[]
          }
          create: {
            args: Prisma.alimento_campanhaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload>
          }
          createMany: {
            args: Prisma.alimento_campanhaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.alimento_campanhaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload>
          }
          update: {
            args: Prisma.alimento_campanhaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload>
          }
          deleteMany: {
            args: Prisma.alimento_campanhaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.alimento_campanhaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.alimento_campanhaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_campanhaPayload>
          }
          aggregate: {
            args: Prisma.Alimento_campanhaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlimento_campanha>
          }
          groupBy: {
            args: Prisma.alimento_campanhaGroupByArgs<ExtArgs>
            result: $Utils.Optional<Alimento_campanhaGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.alimento_campanhaFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.alimento_campanhaAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.alimento_campanhaCountArgs<ExtArgs>
            result: $Utils.Optional<Alimento_campanhaCountAggregateOutputType> | number
          }
        }
      }
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.usuarioFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.usuarioAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      alimento_doacao: {
        payload: Prisma.$alimento_doacaoPayload<ExtArgs>
        fields: Prisma.alimento_doacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.alimento_doacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.alimento_doacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload>
          }
          findFirst: {
            args: Prisma.alimento_doacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.alimento_doacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload>
          }
          findMany: {
            args: Prisma.alimento_doacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload>[]
          }
          create: {
            args: Prisma.alimento_doacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload>
          }
          createMany: {
            args: Prisma.alimento_doacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.alimento_doacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload>
          }
          update: {
            args: Prisma.alimento_doacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload>
          }
          deleteMany: {
            args: Prisma.alimento_doacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.alimento_doacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.alimento_doacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alimento_doacaoPayload>
          }
          aggregate: {
            args: Prisma.Alimento_doacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlimento_doacao>
          }
          groupBy: {
            args: Prisma.alimento_doacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<Alimento_doacaoGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.alimento_doacaoFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.alimento_doacaoAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.alimento_doacaoCountArgs<ExtArgs>
            result: $Utils.Optional<Alimento_doacaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model alimento
   */

  export type AggregateAlimento = {
    _count: AlimentoCountAggregateOutputType | null
    _avg: AlimentoAvgAggregateOutputType | null
    _sum: AlimentoSumAggregateOutputType | null
    _min: AlimentoMinAggregateOutputType | null
    _max: AlimentoMaxAggregateOutputType | null
  }

  export type AlimentoAvgAggregateOutputType = {
    cd_tipo_alimento: number | null
  }

  export type AlimentoSumAggregateOutputType = {
    cd_tipo_alimento: number | null
  }

  export type AlimentoMinAggregateOutputType = {
    id: string | null
    nm_alimento: string | null
    sg_medida_alimento: string | null
    nm_tipo_alimento: string | null
    cd_tipo_alimento: number | null
  }

  export type AlimentoMaxAggregateOutputType = {
    id: string | null
    nm_alimento: string | null
    sg_medida_alimento: string | null
    nm_tipo_alimento: string | null
    cd_tipo_alimento: number | null
  }

  export type AlimentoCountAggregateOutputType = {
    id: number
    nm_alimento: number
    sg_medida_alimento: number
    nm_tipo_alimento: number
    cd_tipo_alimento: number
    _all: number
  }


  export type AlimentoAvgAggregateInputType = {
    cd_tipo_alimento?: true
  }

  export type AlimentoSumAggregateInputType = {
    cd_tipo_alimento?: true
  }

  export type AlimentoMinAggregateInputType = {
    id?: true
    nm_alimento?: true
    sg_medida_alimento?: true
    nm_tipo_alimento?: true
    cd_tipo_alimento?: true
  }

  export type AlimentoMaxAggregateInputType = {
    id?: true
    nm_alimento?: true
    sg_medida_alimento?: true
    nm_tipo_alimento?: true
    cd_tipo_alimento?: true
  }

  export type AlimentoCountAggregateInputType = {
    id?: true
    nm_alimento?: true
    sg_medida_alimento?: true
    nm_tipo_alimento?: true
    cd_tipo_alimento?: true
    _all?: true
  }

  export type AlimentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alimento to aggregate.
     */
    where?: alimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimentos to fetch.
     */
    orderBy?: alimentoOrderByWithRelationInput | alimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: alimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned alimentos
    **/
    _count?: true | AlimentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlimentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlimentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlimentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlimentoMaxAggregateInputType
  }

  export type GetAlimentoAggregateType<T extends AlimentoAggregateArgs> = {
        [P in keyof T & keyof AggregateAlimento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlimento[P]>
      : GetScalarType<T[P], AggregateAlimento[P]>
  }




  export type alimentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: alimentoWhereInput
    orderBy?: alimentoOrderByWithAggregationInput | alimentoOrderByWithAggregationInput[]
    by: AlimentoScalarFieldEnum[] | AlimentoScalarFieldEnum
    having?: alimentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlimentoCountAggregateInputType | true
    _avg?: AlimentoAvgAggregateInputType
    _sum?: AlimentoSumAggregateInputType
    _min?: AlimentoMinAggregateInputType
    _max?: AlimentoMaxAggregateInputType
  }

  export type AlimentoGroupByOutputType = {
    id: string
    nm_alimento: string
    sg_medida_alimento: string
    nm_tipo_alimento: string
    cd_tipo_alimento: number
    _count: AlimentoCountAggregateOutputType | null
    _avg: AlimentoAvgAggregateOutputType | null
    _sum: AlimentoSumAggregateOutputType | null
    _min: AlimentoMinAggregateOutputType | null
    _max: AlimentoMaxAggregateOutputType | null
  }

  type GetAlimentoGroupByPayload<T extends alimentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlimentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlimentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlimentoGroupByOutputType[P]>
            : GetScalarType<T[P], AlimentoGroupByOutputType[P]>
        }
      >
    >


  export type alimentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nm_alimento?: boolean
    sg_medida_alimento?: boolean
    nm_tipo_alimento?: boolean
    cd_tipo_alimento?: boolean
  }, ExtArgs["result"]["alimento"]>


  export type alimentoSelectScalar = {
    id?: boolean
    nm_alimento?: boolean
    sg_medida_alimento?: boolean
    nm_tipo_alimento?: boolean
    cd_tipo_alimento?: boolean
  }


  export type $alimentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "alimento"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nm_alimento: string
      sg_medida_alimento: string
      nm_tipo_alimento: string
      cd_tipo_alimento: number
    }, ExtArgs["result"]["alimento"]>
    composites: {}
  }

  type alimentoGetPayload<S extends boolean | null | undefined | alimentoDefaultArgs> = $Result.GetResult<Prisma.$alimentoPayload, S>

  type alimentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<alimentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlimentoCountAggregateInputType | true
    }

  export interface alimentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['alimento'], meta: { name: 'alimento' } }
    /**
     * Find zero or one Alimento that matches the filter.
     * @param {alimentoFindUniqueArgs} args - Arguments to find a Alimento
     * @example
     * // Get one Alimento
     * const alimento = await prisma.alimento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends alimentoFindUniqueArgs>(args: SelectSubset<T, alimentoFindUniqueArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alimento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {alimentoFindUniqueOrThrowArgs} args - Arguments to find a Alimento
     * @example
     * // Get one Alimento
     * const alimento = await prisma.alimento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends alimentoFindUniqueOrThrowArgs>(args: SelectSubset<T, alimentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alimento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimentoFindFirstArgs} args - Arguments to find a Alimento
     * @example
     * // Get one Alimento
     * const alimento = await prisma.alimento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends alimentoFindFirstArgs>(args?: SelectSubset<T, alimentoFindFirstArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alimento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimentoFindFirstOrThrowArgs} args - Arguments to find a Alimento
     * @example
     * // Get one Alimento
     * const alimento = await prisma.alimento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends alimentoFindFirstOrThrowArgs>(args?: SelectSubset<T, alimentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alimentos
     * const alimentos = await prisma.alimento.findMany()
     * 
     * // Get first 10 Alimentos
     * const alimentos = await prisma.alimento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alimentoWithIdOnly = await prisma.alimento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends alimentoFindManyArgs>(args?: SelectSubset<T, alimentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alimento.
     * @param {alimentoCreateArgs} args - Arguments to create a Alimento.
     * @example
     * // Create one Alimento
     * const Alimento = await prisma.alimento.create({
     *   data: {
     *     // ... data to create a Alimento
     *   }
     * })
     * 
     */
    create<T extends alimentoCreateArgs>(args: SelectSubset<T, alimentoCreateArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alimentos.
     * @param {alimentoCreateManyArgs} args - Arguments to create many Alimentos.
     * @example
     * // Create many Alimentos
     * const alimento = await prisma.alimento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends alimentoCreateManyArgs>(args?: SelectSubset<T, alimentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alimento.
     * @param {alimentoDeleteArgs} args - Arguments to delete one Alimento.
     * @example
     * // Delete one Alimento
     * const Alimento = await prisma.alimento.delete({
     *   where: {
     *     // ... filter to delete one Alimento
     *   }
     * })
     * 
     */
    delete<T extends alimentoDeleteArgs>(args: SelectSubset<T, alimentoDeleteArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alimento.
     * @param {alimentoUpdateArgs} args - Arguments to update one Alimento.
     * @example
     * // Update one Alimento
     * const alimento = await prisma.alimento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends alimentoUpdateArgs>(args: SelectSubset<T, alimentoUpdateArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alimentos.
     * @param {alimentoDeleteManyArgs} args - Arguments to filter Alimentos to delete.
     * @example
     * // Delete a few Alimentos
     * const { count } = await prisma.alimento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends alimentoDeleteManyArgs>(args?: SelectSubset<T, alimentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alimentos
     * const alimento = await prisma.alimento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends alimentoUpdateManyArgs>(args: SelectSubset<T, alimentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alimento.
     * @param {alimentoUpsertArgs} args - Arguments to update or create a Alimento.
     * @example
     * // Update or create a Alimento
     * const alimento = await prisma.alimento.upsert({
     *   create: {
     *     // ... data to create a Alimento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alimento we want to update
     *   }
     * })
     */
    upsert<T extends alimentoUpsertArgs>(args: SelectSubset<T, alimentoUpsertArgs<ExtArgs>>): Prisma__alimentoClient<$Result.GetResult<Prisma.$alimentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Alimentos that matches the filter.
     * @param {alimentoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const alimento = await prisma.alimento.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: alimentoFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Alimento.
     * @param {alimentoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const alimento = await prisma.alimento.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: alimentoAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Alimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimentoCountArgs} args - Arguments to filter Alimentos to count.
     * @example
     * // Count the number of Alimentos
     * const count = await prisma.alimento.count({
     *   where: {
     *     // ... the filter for the Alimentos we want to count
     *   }
     * })
    **/
    count<T extends alimentoCountArgs>(
      args?: Subset<T, alimentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlimentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alimento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlimentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlimentoAggregateArgs>(args: Subset<T, AlimentoAggregateArgs>): Prisma.PrismaPromise<GetAlimentoAggregateType<T>>

    /**
     * Group by Alimento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends alimentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: alimentoGroupByArgs['orderBy'] }
        : { orderBy?: alimentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, alimentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlimentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the alimento model
   */
  readonly fields: alimentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for alimento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__alimentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the alimento model
   */ 
  interface alimentoFieldRefs {
    readonly id: FieldRef<"alimento", 'String'>
    readonly nm_alimento: FieldRef<"alimento", 'String'>
    readonly sg_medida_alimento: FieldRef<"alimento", 'String'>
    readonly nm_tipo_alimento: FieldRef<"alimento", 'String'>
    readonly cd_tipo_alimento: FieldRef<"alimento", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * alimento findUnique
   */
  export type alimentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * Filter, which alimento to fetch.
     */
    where: alimentoWhereUniqueInput
  }

  /**
   * alimento findUniqueOrThrow
   */
  export type alimentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * Filter, which alimento to fetch.
     */
    where: alimentoWhereUniqueInput
  }

  /**
   * alimento findFirst
   */
  export type alimentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * Filter, which alimento to fetch.
     */
    where?: alimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimentos to fetch.
     */
    orderBy?: alimentoOrderByWithRelationInput | alimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alimentos.
     */
    cursor?: alimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alimentos.
     */
    distinct?: AlimentoScalarFieldEnum | AlimentoScalarFieldEnum[]
  }

  /**
   * alimento findFirstOrThrow
   */
  export type alimentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * Filter, which alimento to fetch.
     */
    where?: alimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimentos to fetch.
     */
    orderBy?: alimentoOrderByWithRelationInput | alimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alimentos.
     */
    cursor?: alimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alimentos.
     */
    distinct?: AlimentoScalarFieldEnum | AlimentoScalarFieldEnum[]
  }

  /**
   * alimento findMany
   */
  export type alimentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * Filter, which alimentos to fetch.
     */
    where?: alimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimentos to fetch.
     */
    orderBy?: alimentoOrderByWithRelationInput | alimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing alimentos.
     */
    cursor?: alimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimentos.
     */
    skip?: number
    distinct?: AlimentoScalarFieldEnum | AlimentoScalarFieldEnum[]
  }

  /**
   * alimento create
   */
  export type alimentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * The data needed to create a alimento.
     */
    data: XOR<alimentoCreateInput, alimentoUncheckedCreateInput>
  }

  /**
   * alimento createMany
   */
  export type alimentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many alimentos.
     */
    data: alimentoCreateManyInput | alimentoCreateManyInput[]
  }

  /**
   * alimento update
   */
  export type alimentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * The data needed to update a alimento.
     */
    data: XOR<alimentoUpdateInput, alimentoUncheckedUpdateInput>
    /**
     * Choose, which alimento to update.
     */
    where: alimentoWhereUniqueInput
  }

  /**
   * alimento updateMany
   */
  export type alimentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update alimentos.
     */
    data: XOR<alimentoUpdateManyMutationInput, alimentoUncheckedUpdateManyInput>
    /**
     * Filter which alimentos to update
     */
    where?: alimentoWhereInput
  }

  /**
   * alimento upsert
   */
  export type alimentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * The filter to search for the alimento to update in case it exists.
     */
    where: alimentoWhereUniqueInput
    /**
     * In case the alimento found by the `where` argument doesn't exist, create a new alimento with this data.
     */
    create: XOR<alimentoCreateInput, alimentoUncheckedCreateInput>
    /**
     * In case the alimento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<alimentoUpdateInput, alimentoUncheckedUpdateInput>
  }

  /**
   * alimento delete
   */
  export type alimentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
    /**
     * Filter which alimento to delete.
     */
    where: alimentoWhereUniqueInput
  }

  /**
   * alimento deleteMany
   */
  export type alimentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alimentos to delete
     */
    where?: alimentoWhereInput
  }

  /**
   * alimento findRaw
   */
  export type alimentoFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * alimento aggregateRaw
   */
  export type alimentoAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * alimento without action
   */
  export type alimentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento
     */
    select?: alimentoSelect<ExtArgs> | null
  }


  /**
   * Model campanha
   */

  export type AggregateCampanha = {
    _count: CampanhaCountAggregateOutputType | null
    _min: CampanhaMinAggregateOutputType | null
    _max: CampanhaMaxAggregateOutputType | null
  }

  export type CampanhaMinAggregateOutputType = {
    id: string | null
    usuario_id: string | null
    nm_titulo_campanha: string | null
    dt_encerramento_campanha: Date | null
    ts_criacao_campanha: Date | null
    nm_cidade_campanha: string | null
    sg_estado_campanha: string | null
    ds_acao_campanha: string | null
    cd_imagem_campanha: string | null
    fg_campanha_ativa: boolean | null
  }

  export type CampanhaMaxAggregateOutputType = {
    id: string | null
    usuario_id: string | null
    nm_titulo_campanha: string | null
    dt_encerramento_campanha: Date | null
    ts_criacao_campanha: Date | null
    nm_cidade_campanha: string | null
    sg_estado_campanha: string | null
    ds_acao_campanha: string | null
    cd_imagem_campanha: string | null
    fg_campanha_ativa: boolean | null
  }

  export type CampanhaCountAggregateOutputType = {
    id: number
    usuario_id: number
    nm_titulo_campanha: number
    dt_encerramento_campanha: number
    ts_criacao_campanha: number
    nm_cidade_campanha: number
    sg_estado_campanha: number
    ds_acao_campanha: number
    cd_imagem_campanha: number
    fg_campanha_ativa: number
    _all: number
  }


  export type CampanhaMinAggregateInputType = {
    id?: true
    usuario_id?: true
    nm_titulo_campanha?: true
    dt_encerramento_campanha?: true
    ts_criacao_campanha?: true
    nm_cidade_campanha?: true
    sg_estado_campanha?: true
    ds_acao_campanha?: true
    cd_imagem_campanha?: true
    fg_campanha_ativa?: true
  }

  export type CampanhaMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    nm_titulo_campanha?: true
    dt_encerramento_campanha?: true
    ts_criacao_campanha?: true
    nm_cidade_campanha?: true
    sg_estado_campanha?: true
    ds_acao_campanha?: true
    cd_imagem_campanha?: true
    fg_campanha_ativa?: true
  }

  export type CampanhaCountAggregateInputType = {
    id?: true
    usuario_id?: true
    nm_titulo_campanha?: true
    dt_encerramento_campanha?: true
    ts_criacao_campanha?: true
    nm_cidade_campanha?: true
    sg_estado_campanha?: true
    ds_acao_campanha?: true
    cd_imagem_campanha?: true
    fg_campanha_ativa?: true
    _all?: true
  }

  export type CampanhaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which campanha to aggregate.
     */
    where?: campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of campanhas to fetch.
     */
    orderBy?: campanhaOrderByWithRelationInput | campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` campanhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned campanhas
    **/
    _count?: true | CampanhaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampanhaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampanhaMaxAggregateInputType
  }

  export type GetCampanhaAggregateType<T extends CampanhaAggregateArgs> = {
        [P in keyof T & keyof AggregateCampanha]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampanha[P]>
      : GetScalarType<T[P], AggregateCampanha[P]>
  }




  export type campanhaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: campanhaWhereInput
    orderBy?: campanhaOrderByWithAggregationInput | campanhaOrderByWithAggregationInput[]
    by: CampanhaScalarFieldEnum[] | CampanhaScalarFieldEnum
    having?: campanhaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampanhaCountAggregateInputType | true
    _min?: CampanhaMinAggregateInputType
    _max?: CampanhaMaxAggregateInputType
  }

  export type CampanhaGroupByOutputType = {
    id: string
    usuario_id: string
    nm_titulo_campanha: string
    dt_encerramento_campanha: Date
    ts_criacao_campanha: Date
    nm_cidade_campanha: string
    sg_estado_campanha: string
    ds_acao_campanha: string
    cd_imagem_campanha: string
    fg_campanha_ativa: boolean
    _count: CampanhaCountAggregateOutputType | null
    _min: CampanhaMinAggregateOutputType | null
    _max: CampanhaMaxAggregateOutputType | null
  }

  type GetCampanhaGroupByPayload<T extends campanhaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampanhaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampanhaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampanhaGroupByOutputType[P]>
            : GetScalarType<T[P], CampanhaGroupByOutputType[P]>
        }
      >
    >


  export type campanhaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    nm_titulo_campanha?: boolean
    dt_encerramento_campanha?: boolean
    ts_criacao_campanha?: boolean
    nm_cidade_campanha?: boolean
    sg_estado_campanha?: boolean
    ds_acao_campanha?: boolean
    cd_imagem_campanha?: boolean
    fg_campanha_ativa?: boolean
  }, ExtArgs["result"]["campanha"]>


  export type campanhaSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    nm_titulo_campanha?: boolean
    dt_encerramento_campanha?: boolean
    ts_criacao_campanha?: boolean
    nm_cidade_campanha?: boolean
    sg_estado_campanha?: boolean
    ds_acao_campanha?: boolean
    cd_imagem_campanha?: boolean
    fg_campanha_ativa?: boolean
  }


  export type $campanhaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "campanha"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuario_id: string
      nm_titulo_campanha: string
      dt_encerramento_campanha: Date
      ts_criacao_campanha: Date
      nm_cidade_campanha: string
      sg_estado_campanha: string
      ds_acao_campanha: string
      cd_imagem_campanha: string
      fg_campanha_ativa: boolean
    }, ExtArgs["result"]["campanha"]>
    composites: {}
  }

  type campanhaGetPayload<S extends boolean | null | undefined | campanhaDefaultArgs> = $Result.GetResult<Prisma.$campanhaPayload, S>

  type campanhaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<campanhaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CampanhaCountAggregateInputType | true
    }

  export interface campanhaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['campanha'], meta: { name: 'campanha' } }
    /**
     * Find zero or one Campanha that matches the filter.
     * @param {campanhaFindUniqueArgs} args - Arguments to find a Campanha
     * @example
     * // Get one Campanha
     * const campanha = await prisma.campanha.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends campanhaFindUniqueArgs>(args: SelectSubset<T, campanhaFindUniqueArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Campanha that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {campanhaFindUniqueOrThrowArgs} args - Arguments to find a Campanha
     * @example
     * // Get one Campanha
     * const campanha = await prisma.campanha.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends campanhaFindUniqueOrThrowArgs>(args: SelectSubset<T, campanhaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Campanha that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campanhaFindFirstArgs} args - Arguments to find a Campanha
     * @example
     * // Get one Campanha
     * const campanha = await prisma.campanha.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends campanhaFindFirstArgs>(args?: SelectSubset<T, campanhaFindFirstArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Campanha that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campanhaFindFirstOrThrowArgs} args - Arguments to find a Campanha
     * @example
     * // Get one Campanha
     * const campanha = await prisma.campanha.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends campanhaFindFirstOrThrowArgs>(args?: SelectSubset<T, campanhaFindFirstOrThrowArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Campanhas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campanhaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campanhas
     * const campanhas = await prisma.campanha.findMany()
     * 
     * // Get first 10 Campanhas
     * const campanhas = await prisma.campanha.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campanhaWithIdOnly = await prisma.campanha.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends campanhaFindManyArgs>(args?: SelectSubset<T, campanhaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Campanha.
     * @param {campanhaCreateArgs} args - Arguments to create a Campanha.
     * @example
     * // Create one Campanha
     * const Campanha = await prisma.campanha.create({
     *   data: {
     *     // ... data to create a Campanha
     *   }
     * })
     * 
     */
    create<T extends campanhaCreateArgs>(args: SelectSubset<T, campanhaCreateArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Campanhas.
     * @param {campanhaCreateManyArgs} args - Arguments to create many Campanhas.
     * @example
     * // Create many Campanhas
     * const campanha = await prisma.campanha.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends campanhaCreateManyArgs>(args?: SelectSubset<T, campanhaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Campanha.
     * @param {campanhaDeleteArgs} args - Arguments to delete one Campanha.
     * @example
     * // Delete one Campanha
     * const Campanha = await prisma.campanha.delete({
     *   where: {
     *     // ... filter to delete one Campanha
     *   }
     * })
     * 
     */
    delete<T extends campanhaDeleteArgs>(args: SelectSubset<T, campanhaDeleteArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Campanha.
     * @param {campanhaUpdateArgs} args - Arguments to update one Campanha.
     * @example
     * // Update one Campanha
     * const campanha = await prisma.campanha.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends campanhaUpdateArgs>(args: SelectSubset<T, campanhaUpdateArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Campanhas.
     * @param {campanhaDeleteManyArgs} args - Arguments to filter Campanhas to delete.
     * @example
     * // Delete a few Campanhas
     * const { count } = await prisma.campanha.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends campanhaDeleteManyArgs>(args?: SelectSubset<T, campanhaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campanhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campanhaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campanhas
     * const campanha = await prisma.campanha.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends campanhaUpdateManyArgs>(args: SelectSubset<T, campanhaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Campanha.
     * @param {campanhaUpsertArgs} args - Arguments to update or create a Campanha.
     * @example
     * // Update or create a Campanha
     * const campanha = await prisma.campanha.upsert({
     *   create: {
     *     // ... data to create a Campanha
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campanha we want to update
     *   }
     * })
     */
    upsert<T extends campanhaUpsertArgs>(args: SelectSubset<T, campanhaUpsertArgs<ExtArgs>>): Prisma__campanhaClient<$Result.GetResult<Prisma.$campanhaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Campanhas that matches the filter.
     * @param {campanhaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const campanha = await prisma.campanha.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: campanhaFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Campanha.
     * @param {campanhaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const campanha = await prisma.campanha.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: campanhaAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Campanhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campanhaCountArgs} args - Arguments to filter Campanhas to count.
     * @example
     * // Count the number of Campanhas
     * const count = await prisma.campanha.count({
     *   where: {
     *     // ... the filter for the Campanhas we want to count
     *   }
     * })
    **/
    count<T extends campanhaCountArgs>(
      args?: Subset<T, campanhaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampanhaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campanha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampanhaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampanhaAggregateArgs>(args: Subset<T, CampanhaAggregateArgs>): Prisma.PrismaPromise<GetCampanhaAggregateType<T>>

    /**
     * Group by Campanha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campanhaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends campanhaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: campanhaGroupByArgs['orderBy'] }
        : { orderBy?: campanhaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, campanhaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampanhaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the campanha model
   */
  readonly fields: campanhaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for campanha.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__campanhaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the campanha model
   */ 
  interface campanhaFieldRefs {
    readonly id: FieldRef<"campanha", 'String'>
    readonly usuario_id: FieldRef<"campanha", 'String'>
    readonly nm_titulo_campanha: FieldRef<"campanha", 'String'>
    readonly dt_encerramento_campanha: FieldRef<"campanha", 'DateTime'>
    readonly ts_criacao_campanha: FieldRef<"campanha", 'DateTime'>
    readonly nm_cidade_campanha: FieldRef<"campanha", 'String'>
    readonly sg_estado_campanha: FieldRef<"campanha", 'String'>
    readonly ds_acao_campanha: FieldRef<"campanha", 'String'>
    readonly cd_imagem_campanha: FieldRef<"campanha", 'String'>
    readonly fg_campanha_ativa: FieldRef<"campanha", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * campanha findUnique
   */
  export type campanhaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * Filter, which campanha to fetch.
     */
    where: campanhaWhereUniqueInput
  }

  /**
   * campanha findUniqueOrThrow
   */
  export type campanhaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * Filter, which campanha to fetch.
     */
    where: campanhaWhereUniqueInput
  }

  /**
   * campanha findFirst
   */
  export type campanhaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * Filter, which campanha to fetch.
     */
    where?: campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of campanhas to fetch.
     */
    orderBy?: campanhaOrderByWithRelationInput | campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for campanhas.
     */
    cursor?: campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` campanhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of campanhas.
     */
    distinct?: CampanhaScalarFieldEnum | CampanhaScalarFieldEnum[]
  }

  /**
   * campanha findFirstOrThrow
   */
  export type campanhaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * Filter, which campanha to fetch.
     */
    where?: campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of campanhas to fetch.
     */
    orderBy?: campanhaOrderByWithRelationInput | campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for campanhas.
     */
    cursor?: campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` campanhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of campanhas.
     */
    distinct?: CampanhaScalarFieldEnum | CampanhaScalarFieldEnum[]
  }

  /**
   * campanha findMany
   */
  export type campanhaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * Filter, which campanhas to fetch.
     */
    where?: campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of campanhas to fetch.
     */
    orderBy?: campanhaOrderByWithRelationInput | campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing campanhas.
     */
    cursor?: campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` campanhas.
     */
    skip?: number
    distinct?: CampanhaScalarFieldEnum | CampanhaScalarFieldEnum[]
  }

  /**
   * campanha create
   */
  export type campanhaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * The data needed to create a campanha.
     */
    data: XOR<campanhaCreateInput, campanhaUncheckedCreateInput>
  }

  /**
   * campanha createMany
   */
  export type campanhaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many campanhas.
     */
    data: campanhaCreateManyInput | campanhaCreateManyInput[]
  }

  /**
   * campanha update
   */
  export type campanhaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * The data needed to update a campanha.
     */
    data: XOR<campanhaUpdateInput, campanhaUncheckedUpdateInput>
    /**
     * Choose, which campanha to update.
     */
    where: campanhaWhereUniqueInput
  }

  /**
   * campanha updateMany
   */
  export type campanhaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update campanhas.
     */
    data: XOR<campanhaUpdateManyMutationInput, campanhaUncheckedUpdateManyInput>
    /**
     * Filter which campanhas to update
     */
    where?: campanhaWhereInput
  }

  /**
   * campanha upsert
   */
  export type campanhaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * The filter to search for the campanha to update in case it exists.
     */
    where: campanhaWhereUniqueInput
    /**
     * In case the campanha found by the `where` argument doesn't exist, create a new campanha with this data.
     */
    create: XOR<campanhaCreateInput, campanhaUncheckedCreateInput>
    /**
     * In case the campanha was found with the provided `where` argument, update it with this data.
     */
    update: XOR<campanhaUpdateInput, campanhaUncheckedUpdateInput>
  }

  /**
   * campanha delete
   */
  export type campanhaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
    /**
     * Filter which campanha to delete.
     */
    where: campanhaWhereUniqueInput
  }

  /**
   * campanha deleteMany
   */
  export type campanhaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which campanhas to delete
     */
    where?: campanhaWhereInput
  }

  /**
   * campanha findRaw
   */
  export type campanhaFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * campanha aggregateRaw
   */
  export type campanhaAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * campanha without action
   */
  export type campanhaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the campanha
     */
    select?: campanhaSelect<ExtArgs> | null
  }


  /**
   * Model alimento_campanha
   */

  export type AggregateAlimento_campanha = {
    _count: Alimento_campanhaCountAggregateOutputType | null
    _avg: Alimento_campanhaAvgAggregateOutputType | null
    _sum: Alimento_campanhaSumAggregateOutputType | null
    _min: Alimento_campanhaMinAggregateOutputType | null
    _max: Alimento_campanhaMaxAggregateOutputType | null
  }

  export type Alimento_campanhaAvgAggregateOutputType = {
    qt_alimento_meta: number | null
  }

  export type Alimento_campanhaSumAggregateOutputType = {
    qt_alimento_meta: number | null
  }

  export type Alimento_campanhaMinAggregateOutputType = {
    id: string | null
    alimento_id: string | null
    campanha_id: string | null
    qt_alimento_meta: number | null
  }

  export type Alimento_campanhaMaxAggregateOutputType = {
    id: string | null
    alimento_id: string | null
    campanha_id: string | null
    qt_alimento_meta: number | null
  }

  export type Alimento_campanhaCountAggregateOutputType = {
    id: number
    alimento_id: number
    campanha_id: number
    qt_alimento_meta: number
    _all: number
  }


  export type Alimento_campanhaAvgAggregateInputType = {
    qt_alimento_meta?: true
  }

  export type Alimento_campanhaSumAggregateInputType = {
    qt_alimento_meta?: true
  }

  export type Alimento_campanhaMinAggregateInputType = {
    id?: true
    alimento_id?: true
    campanha_id?: true
    qt_alimento_meta?: true
  }

  export type Alimento_campanhaMaxAggregateInputType = {
    id?: true
    alimento_id?: true
    campanha_id?: true
    qt_alimento_meta?: true
  }

  export type Alimento_campanhaCountAggregateInputType = {
    id?: true
    alimento_id?: true
    campanha_id?: true
    qt_alimento_meta?: true
    _all?: true
  }

  export type Alimento_campanhaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alimento_campanha to aggregate.
     */
    where?: alimento_campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_campanhas to fetch.
     */
    orderBy?: alimento_campanhaOrderByWithRelationInput | alimento_campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: alimento_campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_campanhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned alimento_campanhas
    **/
    _count?: true | Alimento_campanhaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Alimento_campanhaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Alimento_campanhaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Alimento_campanhaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Alimento_campanhaMaxAggregateInputType
  }

  export type GetAlimento_campanhaAggregateType<T extends Alimento_campanhaAggregateArgs> = {
        [P in keyof T & keyof AggregateAlimento_campanha]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlimento_campanha[P]>
      : GetScalarType<T[P], AggregateAlimento_campanha[P]>
  }




  export type alimento_campanhaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: alimento_campanhaWhereInput
    orderBy?: alimento_campanhaOrderByWithAggregationInput | alimento_campanhaOrderByWithAggregationInput[]
    by: Alimento_campanhaScalarFieldEnum[] | Alimento_campanhaScalarFieldEnum
    having?: alimento_campanhaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Alimento_campanhaCountAggregateInputType | true
    _avg?: Alimento_campanhaAvgAggregateInputType
    _sum?: Alimento_campanhaSumAggregateInputType
    _min?: Alimento_campanhaMinAggregateInputType
    _max?: Alimento_campanhaMaxAggregateInputType
  }

  export type Alimento_campanhaGroupByOutputType = {
    id: string
    alimento_id: string
    campanha_id: string
    qt_alimento_meta: number
    _count: Alimento_campanhaCountAggregateOutputType | null
    _avg: Alimento_campanhaAvgAggregateOutputType | null
    _sum: Alimento_campanhaSumAggregateOutputType | null
    _min: Alimento_campanhaMinAggregateOutputType | null
    _max: Alimento_campanhaMaxAggregateOutputType | null
  }

  type GetAlimento_campanhaGroupByPayload<T extends alimento_campanhaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Alimento_campanhaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Alimento_campanhaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Alimento_campanhaGroupByOutputType[P]>
            : GetScalarType<T[P], Alimento_campanhaGroupByOutputType[P]>
        }
      >
    >


  export type alimento_campanhaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alimento_id?: boolean
    campanha_id?: boolean
    qt_alimento_meta?: boolean
  }, ExtArgs["result"]["alimento_campanha"]>


  export type alimento_campanhaSelectScalar = {
    id?: boolean
    alimento_id?: boolean
    campanha_id?: boolean
    qt_alimento_meta?: boolean
  }


  export type $alimento_campanhaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "alimento_campanha"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      alimento_id: string
      campanha_id: string
      qt_alimento_meta: number
    }, ExtArgs["result"]["alimento_campanha"]>
    composites: {}
  }

  type alimento_campanhaGetPayload<S extends boolean | null | undefined | alimento_campanhaDefaultArgs> = $Result.GetResult<Prisma.$alimento_campanhaPayload, S>

  type alimento_campanhaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<alimento_campanhaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Alimento_campanhaCountAggregateInputType | true
    }

  export interface alimento_campanhaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['alimento_campanha'], meta: { name: 'alimento_campanha' } }
    /**
     * Find zero or one Alimento_campanha that matches the filter.
     * @param {alimento_campanhaFindUniqueArgs} args - Arguments to find a Alimento_campanha
     * @example
     * // Get one Alimento_campanha
     * const alimento_campanha = await prisma.alimento_campanha.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends alimento_campanhaFindUniqueArgs>(args: SelectSubset<T, alimento_campanhaFindUniqueArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alimento_campanha that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {alimento_campanhaFindUniqueOrThrowArgs} args - Arguments to find a Alimento_campanha
     * @example
     * // Get one Alimento_campanha
     * const alimento_campanha = await prisma.alimento_campanha.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends alimento_campanhaFindUniqueOrThrowArgs>(args: SelectSubset<T, alimento_campanhaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alimento_campanha that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_campanhaFindFirstArgs} args - Arguments to find a Alimento_campanha
     * @example
     * // Get one Alimento_campanha
     * const alimento_campanha = await prisma.alimento_campanha.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends alimento_campanhaFindFirstArgs>(args?: SelectSubset<T, alimento_campanhaFindFirstArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alimento_campanha that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_campanhaFindFirstOrThrowArgs} args - Arguments to find a Alimento_campanha
     * @example
     * // Get one Alimento_campanha
     * const alimento_campanha = await prisma.alimento_campanha.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends alimento_campanhaFindFirstOrThrowArgs>(args?: SelectSubset<T, alimento_campanhaFindFirstOrThrowArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alimento_campanhas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_campanhaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alimento_campanhas
     * const alimento_campanhas = await prisma.alimento_campanha.findMany()
     * 
     * // Get first 10 Alimento_campanhas
     * const alimento_campanhas = await prisma.alimento_campanha.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alimento_campanhaWithIdOnly = await prisma.alimento_campanha.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends alimento_campanhaFindManyArgs>(args?: SelectSubset<T, alimento_campanhaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alimento_campanha.
     * @param {alimento_campanhaCreateArgs} args - Arguments to create a Alimento_campanha.
     * @example
     * // Create one Alimento_campanha
     * const Alimento_campanha = await prisma.alimento_campanha.create({
     *   data: {
     *     // ... data to create a Alimento_campanha
     *   }
     * })
     * 
     */
    create<T extends alimento_campanhaCreateArgs>(args: SelectSubset<T, alimento_campanhaCreateArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alimento_campanhas.
     * @param {alimento_campanhaCreateManyArgs} args - Arguments to create many Alimento_campanhas.
     * @example
     * // Create many Alimento_campanhas
     * const alimento_campanha = await prisma.alimento_campanha.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends alimento_campanhaCreateManyArgs>(args?: SelectSubset<T, alimento_campanhaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alimento_campanha.
     * @param {alimento_campanhaDeleteArgs} args - Arguments to delete one Alimento_campanha.
     * @example
     * // Delete one Alimento_campanha
     * const Alimento_campanha = await prisma.alimento_campanha.delete({
     *   where: {
     *     // ... filter to delete one Alimento_campanha
     *   }
     * })
     * 
     */
    delete<T extends alimento_campanhaDeleteArgs>(args: SelectSubset<T, alimento_campanhaDeleteArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alimento_campanha.
     * @param {alimento_campanhaUpdateArgs} args - Arguments to update one Alimento_campanha.
     * @example
     * // Update one Alimento_campanha
     * const alimento_campanha = await prisma.alimento_campanha.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends alimento_campanhaUpdateArgs>(args: SelectSubset<T, alimento_campanhaUpdateArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alimento_campanhas.
     * @param {alimento_campanhaDeleteManyArgs} args - Arguments to filter Alimento_campanhas to delete.
     * @example
     * // Delete a few Alimento_campanhas
     * const { count } = await prisma.alimento_campanha.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends alimento_campanhaDeleteManyArgs>(args?: SelectSubset<T, alimento_campanhaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alimento_campanhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_campanhaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alimento_campanhas
     * const alimento_campanha = await prisma.alimento_campanha.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends alimento_campanhaUpdateManyArgs>(args: SelectSubset<T, alimento_campanhaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alimento_campanha.
     * @param {alimento_campanhaUpsertArgs} args - Arguments to update or create a Alimento_campanha.
     * @example
     * // Update or create a Alimento_campanha
     * const alimento_campanha = await prisma.alimento_campanha.upsert({
     *   create: {
     *     // ... data to create a Alimento_campanha
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alimento_campanha we want to update
     *   }
     * })
     */
    upsert<T extends alimento_campanhaUpsertArgs>(args: SelectSubset<T, alimento_campanhaUpsertArgs<ExtArgs>>): Prisma__alimento_campanhaClient<$Result.GetResult<Prisma.$alimento_campanhaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Alimento_campanhas that matches the filter.
     * @param {alimento_campanhaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const alimento_campanha = await prisma.alimento_campanha.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: alimento_campanhaFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Alimento_campanha.
     * @param {alimento_campanhaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const alimento_campanha = await prisma.alimento_campanha.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: alimento_campanhaAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Alimento_campanhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_campanhaCountArgs} args - Arguments to filter Alimento_campanhas to count.
     * @example
     * // Count the number of Alimento_campanhas
     * const count = await prisma.alimento_campanha.count({
     *   where: {
     *     // ... the filter for the Alimento_campanhas we want to count
     *   }
     * })
    **/
    count<T extends alimento_campanhaCountArgs>(
      args?: Subset<T, alimento_campanhaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Alimento_campanhaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alimento_campanha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Alimento_campanhaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Alimento_campanhaAggregateArgs>(args: Subset<T, Alimento_campanhaAggregateArgs>): Prisma.PrismaPromise<GetAlimento_campanhaAggregateType<T>>

    /**
     * Group by Alimento_campanha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_campanhaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends alimento_campanhaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: alimento_campanhaGroupByArgs['orderBy'] }
        : { orderBy?: alimento_campanhaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, alimento_campanhaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlimento_campanhaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the alimento_campanha model
   */
  readonly fields: alimento_campanhaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for alimento_campanha.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__alimento_campanhaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the alimento_campanha model
   */ 
  interface alimento_campanhaFieldRefs {
    readonly id: FieldRef<"alimento_campanha", 'String'>
    readonly alimento_id: FieldRef<"alimento_campanha", 'String'>
    readonly campanha_id: FieldRef<"alimento_campanha", 'String'>
    readonly qt_alimento_meta: FieldRef<"alimento_campanha", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * alimento_campanha findUnique
   */
  export type alimento_campanhaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * Filter, which alimento_campanha to fetch.
     */
    where: alimento_campanhaWhereUniqueInput
  }

  /**
   * alimento_campanha findUniqueOrThrow
   */
  export type alimento_campanhaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * Filter, which alimento_campanha to fetch.
     */
    where: alimento_campanhaWhereUniqueInput
  }

  /**
   * alimento_campanha findFirst
   */
  export type alimento_campanhaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * Filter, which alimento_campanha to fetch.
     */
    where?: alimento_campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_campanhas to fetch.
     */
    orderBy?: alimento_campanhaOrderByWithRelationInput | alimento_campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alimento_campanhas.
     */
    cursor?: alimento_campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_campanhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alimento_campanhas.
     */
    distinct?: Alimento_campanhaScalarFieldEnum | Alimento_campanhaScalarFieldEnum[]
  }

  /**
   * alimento_campanha findFirstOrThrow
   */
  export type alimento_campanhaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * Filter, which alimento_campanha to fetch.
     */
    where?: alimento_campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_campanhas to fetch.
     */
    orderBy?: alimento_campanhaOrderByWithRelationInput | alimento_campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alimento_campanhas.
     */
    cursor?: alimento_campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_campanhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alimento_campanhas.
     */
    distinct?: Alimento_campanhaScalarFieldEnum | Alimento_campanhaScalarFieldEnum[]
  }

  /**
   * alimento_campanha findMany
   */
  export type alimento_campanhaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * Filter, which alimento_campanhas to fetch.
     */
    where?: alimento_campanhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_campanhas to fetch.
     */
    orderBy?: alimento_campanhaOrderByWithRelationInput | alimento_campanhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing alimento_campanhas.
     */
    cursor?: alimento_campanhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_campanhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_campanhas.
     */
    skip?: number
    distinct?: Alimento_campanhaScalarFieldEnum | Alimento_campanhaScalarFieldEnum[]
  }

  /**
   * alimento_campanha create
   */
  export type alimento_campanhaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * The data needed to create a alimento_campanha.
     */
    data: XOR<alimento_campanhaCreateInput, alimento_campanhaUncheckedCreateInput>
  }

  /**
   * alimento_campanha createMany
   */
  export type alimento_campanhaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many alimento_campanhas.
     */
    data: alimento_campanhaCreateManyInput | alimento_campanhaCreateManyInput[]
  }

  /**
   * alimento_campanha update
   */
  export type alimento_campanhaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * The data needed to update a alimento_campanha.
     */
    data: XOR<alimento_campanhaUpdateInput, alimento_campanhaUncheckedUpdateInput>
    /**
     * Choose, which alimento_campanha to update.
     */
    where: alimento_campanhaWhereUniqueInput
  }

  /**
   * alimento_campanha updateMany
   */
  export type alimento_campanhaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update alimento_campanhas.
     */
    data: XOR<alimento_campanhaUpdateManyMutationInput, alimento_campanhaUncheckedUpdateManyInput>
    /**
     * Filter which alimento_campanhas to update
     */
    where?: alimento_campanhaWhereInput
  }

  /**
   * alimento_campanha upsert
   */
  export type alimento_campanhaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * The filter to search for the alimento_campanha to update in case it exists.
     */
    where: alimento_campanhaWhereUniqueInput
    /**
     * In case the alimento_campanha found by the `where` argument doesn't exist, create a new alimento_campanha with this data.
     */
    create: XOR<alimento_campanhaCreateInput, alimento_campanhaUncheckedCreateInput>
    /**
     * In case the alimento_campanha was found with the provided `where` argument, update it with this data.
     */
    update: XOR<alimento_campanhaUpdateInput, alimento_campanhaUncheckedUpdateInput>
  }

  /**
   * alimento_campanha delete
   */
  export type alimento_campanhaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
    /**
     * Filter which alimento_campanha to delete.
     */
    where: alimento_campanhaWhereUniqueInput
  }

  /**
   * alimento_campanha deleteMany
   */
  export type alimento_campanhaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alimento_campanhas to delete
     */
    where?: alimento_campanhaWhereInput
  }

  /**
   * alimento_campanha findRaw
   */
  export type alimento_campanhaFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * alimento_campanha aggregateRaw
   */
  export type alimento_campanhaAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * alimento_campanha without action
   */
  export type alimento_campanhaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_campanha
     */
    select?: alimento_campanhaSelect<ExtArgs> | null
  }


  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    fg_admin: number | null
    qt_advertencias_usuario: number | null
    fg_usuario_deletado: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    fg_admin: number | null
    qt_advertencias_usuario: number | null
    fg_usuario_deletado: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    tipo_usuario: string | null
    nm_usuario: string | null
    ch_cpf_usuario: string | null
    ch_cnpj_usuario: string | null
    dt_nascimento_usuario: Date | null
    nr_celular_usuario: string | null
    sg_estado_usuario: string | null
    nm_cidade_usuario: string | null
    cd_foto_usuario: string | null
    cd_senha_usuario: string | null
    cd_email_usuario: string | null
    fg_admin: number | null
    qt_advertencias_usuario: number | null
    fg_usuario_deletado: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    tipo_usuario: string | null
    nm_usuario: string | null
    ch_cpf_usuario: string | null
    ch_cnpj_usuario: string | null
    dt_nascimento_usuario: Date | null
    nr_celular_usuario: string | null
    sg_estado_usuario: string | null
    nm_cidade_usuario: string | null
    cd_foto_usuario: string | null
    cd_senha_usuario: string | null
    cd_email_usuario: string | null
    fg_admin: number | null
    qt_advertencias_usuario: number | null
    fg_usuario_deletado: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    tipo_usuario: number
    nm_usuario: number
    ch_cpf_usuario: number
    ch_cnpj_usuario: number
    dt_nascimento_usuario: number
    nr_celular_usuario: number
    sg_estado_usuario: number
    nm_cidade_usuario: number
    cd_foto_usuario: number
    cd_senha_usuario: number
    cd_email_usuario: number
    fg_admin: number
    qt_advertencias_usuario: number
    fg_usuario_deletado: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    fg_admin?: true
    qt_advertencias_usuario?: true
    fg_usuario_deletado?: true
  }

  export type UsuarioSumAggregateInputType = {
    fg_admin?: true
    qt_advertencias_usuario?: true
    fg_usuario_deletado?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    tipo_usuario?: true
    nm_usuario?: true
    ch_cpf_usuario?: true
    ch_cnpj_usuario?: true
    dt_nascimento_usuario?: true
    nr_celular_usuario?: true
    sg_estado_usuario?: true
    nm_cidade_usuario?: true
    cd_foto_usuario?: true
    cd_senha_usuario?: true
    cd_email_usuario?: true
    fg_admin?: true
    qt_advertencias_usuario?: true
    fg_usuario_deletado?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    tipo_usuario?: true
    nm_usuario?: true
    ch_cpf_usuario?: true
    ch_cnpj_usuario?: true
    dt_nascimento_usuario?: true
    nr_celular_usuario?: true
    sg_estado_usuario?: true
    nm_cidade_usuario?: true
    cd_foto_usuario?: true
    cd_senha_usuario?: true
    cd_email_usuario?: true
    fg_admin?: true
    qt_advertencias_usuario?: true
    fg_usuario_deletado?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    tipo_usuario?: true
    nm_usuario?: true
    ch_cpf_usuario?: true
    ch_cnpj_usuario?: true
    dt_nascimento_usuario?: true
    nr_celular_usuario?: true
    sg_estado_usuario?: true
    nm_cidade_usuario?: true
    cd_foto_usuario?: true
    cd_senha_usuario?: true
    cd_email_usuario?: true
    fg_admin?: true
    qt_advertencias_usuario?: true
    fg_usuario_deletado?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    tipo_usuario: string | null
    nm_usuario: string
    ch_cpf_usuario: string | null
    ch_cnpj_usuario: string | null
    dt_nascimento_usuario: Date | null
    nr_celular_usuario: string
    sg_estado_usuario: string
    nm_cidade_usuario: string
    cd_foto_usuario: string
    cd_senha_usuario: string
    cd_email_usuario: string
    fg_admin: number
    qt_advertencias_usuario: number
    fg_usuario_deletado: number
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo_usuario?: boolean
    nm_usuario?: boolean
    ch_cpf_usuario?: boolean
    ch_cnpj_usuario?: boolean
    dt_nascimento_usuario?: boolean
    nr_celular_usuario?: boolean
    sg_estado_usuario?: boolean
    nm_cidade_usuario?: boolean
    cd_foto_usuario?: boolean
    cd_senha_usuario?: boolean
    cd_email_usuario?: boolean
    fg_admin?: boolean
    qt_advertencias_usuario?: boolean
    fg_usuario_deletado?: boolean
  }, ExtArgs["result"]["usuario"]>


  export type usuarioSelectScalar = {
    id?: boolean
    tipo_usuario?: boolean
    nm_usuario?: boolean
    ch_cpf_usuario?: boolean
    ch_cnpj_usuario?: boolean
    dt_nascimento_usuario?: boolean
    nr_celular_usuario?: boolean
    sg_estado_usuario?: boolean
    nm_cidade_usuario?: boolean
    cd_foto_usuario?: boolean
    cd_senha_usuario?: boolean
    cd_email_usuario?: boolean
    fg_admin?: boolean
    qt_advertencias_usuario?: boolean
    fg_usuario_deletado?: boolean
  }


  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tipo_usuario: string | null
      nm_usuario: string
      ch_cpf_usuario: string | null
      ch_cnpj_usuario: string | null
      dt_nascimento_usuario: Date | null
      nr_celular_usuario: string
      sg_estado_usuario: string
      nm_cidade_usuario: string
      cd_foto_usuario: string
      cd_senha_usuario: string
      cd_email_usuario: string
      fg_admin: number
      qt_advertencias_usuario: number
      fg_usuario_deletado: number
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuarioFindUniqueArgs>(args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuarioFindFirstArgs>(args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usuarioFindManyArgs>(args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends usuarioCreateArgs>(args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuarioCreateManyArgs>(args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends usuarioDeleteArgs>(args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuarioUpdateArgs>(args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuarioDeleteManyArgs>(args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuarioUpdateManyArgs>(args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends usuarioUpsertArgs>(args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * @param {usuarioFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const usuario = await prisma.usuario.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: usuarioFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Usuario.
     * @param {usuarioAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const usuario = await prisma.usuario.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: usuarioAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly id: FieldRef<"usuario", 'String'>
    readonly tipo_usuario: FieldRef<"usuario", 'String'>
    readonly nm_usuario: FieldRef<"usuario", 'String'>
    readonly ch_cpf_usuario: FieldRef<"usuario", 'String'>
    readonly ch_cnpj_usuario: FieldRef<"usuario", 'String'>
    readonly dt_nascimento_usuario: FieldRef<"usuario", 'DateTime'>
    readonly nr_celular_usuario: FieldRef<"usuario", 'String'>
    readonly sg_estado_usuario: FieldRef<"usuario", 'String'>
    readonly nm_cidade_usuario: FieldRef<"usuario", 'String'>
    readonly cd_foto_usuario: FieldRef<"usuario", 'String'>
    readonly cd_senha_usuario: FieldRef<"usuario", 'String'>
    readonly cd_email_usuario: FieldRef<"usuario", 'String'>
    readonly fg_admin: FieldRef<"usuario", 'Int'>
    readonly qt_advertencias_usuario: FieldRef<"usuario", 'Int'>
    readonly fg_usuario_deletado: FieldRef<"usuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }

  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
  }

  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }

  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario findRaw
   */
  export type usuarioFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * usuario aggregateRaw
   */
  export type usuarioAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
  }


  /**
   * Model alimento_doacao
   */

  export type AggregateAlimento_doacao = {
    _count: Alimento_doacaoCountAggregateOutputType | null
    _avg: Alimento_doacaoAvgAggregateOutputType | null
    _sum: Alimento_doacaoSumAggregateOutputType | null
    _min: Alimento_doacaoMinAggregateOutputType | null
    _max: Alimento_doacaoMaxAggregateOutputType | null
  }

  export type Alimento_doacaoAvgAggregateOutputType = {
    qt_alimento_doado: number | null
  }

  export type Alimento_doacaoSumAggregateOutputType = {
    qt_alimento_doado: number | null
  }

  export type Alimento_doacaoMinAggregateOutputType = {
    id: string | null
    usuario_id: string | null
    alimento_id: string | null
    campanha_id: string | null
    qt_alimento_doado: number | null
  }

  export type Alimento_doacaoMaxAggregateOutputType = {
    id: string | null
    usuario_id: string | null
    alimento_id: string | null
    campanha_id: string | null
    qt_alimento_doado: number | null
  }

  export type Alimento_doacaoCountAggregateOutputType = {
    id: number
    usuario_id: number
    alimento_id: number
    campanha_id: number
    qt_alimento_doado: number
    _all: number
  }


  export type Alimento_doacaoAvgAggregateInputType = {
    qt_alimento_doado?: true
  }

  export type Alimento_doacaoSumAggregateInputType = {
    qt_alimento_doado?: true
  }

  export type Alimento_doacaoMinAggregateInputType = {
    id?: true
    usuario_id?: true
    alimento_id?: true
    campanha_id?: true
    qt_alimento_doado?: true
  }

  export type Alimento_doacaoMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    alimento_id?: true
    campanha_id?: true
    qt_alimento_doado?: true
  }

  export type Alimento_doacaoCountAggregateInputType = {
    id?: true
    usuario_id?: true
    alimento_id?: true
    campanha_id?: true
    qt_alimento_doado?: true
    _all?: true
  }

  export type Alimento_doacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alimento_doacao to aggregate.
     */
    where?: alimento_doacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_doacaos to fetch.
     */
    orderBy?: alimento_doacaoOrderByWithRelationInput | alimento_doacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: alimento_doacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned alimento_doacaos
    **/
    _count?: true | Alimento_doacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Alimento_doacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Alimento_doacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Alimento_doacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Alimento_doacaoMaxAggregateInputType
  }

  export type GetAlimento_doacaoAggregateType<T extends Alimento_doacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateAlimento_doacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlimento_doacao[P]>
      : GetScalarType<T[P], AggregateAlimento_doacao[P]>
  }




  export type alimento_doacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: alimento_doacaoWhereInput
    orderBy?: alimento_doacaoOrderByWithAggregationInput | alimento_doacaoOrderByWithAggregationInput[]
    by: Alimento_doacaoScalarFieldEnum[] | Alimento_doacaoScalarFieldEnum
    having?: alimento_doacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Alimento_doacaoCountAggregateInputType | true
    _avg?: Alimento_doacaoAvgAggregateInputType
    _sum?: Alimento_doacaoSumAggregateInputType
    _min?: Alimento_doacaoMinAggregateInputType
    _max?: Alimento_doacaoMaxAggregateInputType
  }

  export type Alimento_doacaoGroupByOutputType = {
    id: string
    usuario_id: string
    alimento_id: string
    campanha_id: string
    qt_alimento_doado: number
    _count: Alimento_doacaoCountAggregateOutputType | null
    _avg: Alimento_doacaoAvgAggregateOutputType | null
    _sum: Alimento_doacaoSumAggregateOutputType | null
    _min: Alimento_doacaoMinAggregateOutputType | null
    _max: Alimento_doacaoMaxAggregateOutputType | null
  }

  type GetAlimento_doacaoGroupByPayload<T extends alimento_doacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Alimento_doacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Alimento_doacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Alimento_doacaoGroupByOutputType[P]>
            : GetScalarType<T[P], Alimento_doacaoGroupByOutputType[P]>
        }
      >
    >


  export type alimento_doacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    alimento_id?: boolean
    campanha_id?: boolean
    qt_alimento_doado?: boolean
  }, ExtArgs["result"]["alimento_doacao"]>


  export type alimento_doacaoSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    alimento_id?: boolean
    campanha_id?: boolean
    qt_alimento_doado?: boolean
  }


  export type $alimento_doacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "alimento_doacao"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuario_id: string
      alimento_id: string
      campanha_id: string
      qt_alimento_doado: number
    }, ExtArgs["result"]["alimento_doacao"]>
    composites: {}
  }

  type alimento_doacaoGetPayload<S extends boolean | null | undefined | alimento_doacaoDefaultArgs> = $Result.GetResult<Prisma.$alimento_doacaoPayload, S>

  type alimento_doacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<alimento_doacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Alimento_doacaoCountAggregateInputType | true
    }

  export interface alimento_doacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['alimento_doacao'], meta: { name: 'alimento_doacao' } }
    /**
     * Find zero or one Alimento_doacao that matches the filter.
     * @param {alimento_doacaoFindUniqueArgs} args - Arguments to find a Alimento_doacao
     * @example
     * // Get one Alimento_doacao
     * const alimento_doacao = await prisma.alimento_doacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends alimento_doacaoFindUniqueArgs>(args: SelectSubset<T, alimento_doacaoFindUniqueArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alimento_doacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {alimento_doacaoFindUniqueOrThrowArgs} args - Arguments to find a Alimento_doacao
     * @example
     * // Get one Alimento_doacao
     * const alimento_doacao = await prisma.alimento_doacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends alimento_doacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, alimento_doacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alimento_doacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_doacaoFindFirstArgs} args - Arguments to find a Alimento_doacao
     * @example
     * // Get one Alimento_doacao
     * const alimento_doacao = await prisma.alimento_doacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends alimento_doacaoFindFirstArgs>(args?: SelectSubset<T, alimento_doacaoFindFirstArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alimento_doacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_doacaoFindFirstOrThrowArgs} args - Arguments to find a Alimento_doacao
     * @example
     * // Get one Alimento_doacao
     * const alimento_doacao = await prisma.alimento_doacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends alimento_doacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, alimento_doacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alimento_doacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_doacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alimento_doacaos
     * const alimento_doacaos = await prisma.alimento_doacao.findMany()
     * 
     * // Get first 10 Alimento_doacaos
     * const alimento_doacaos = await prisma.alimento_doacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alimento_doacaoWithIdOnly = await prisma.alimento_doacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends alimento_doacaoFindManyArgs>(args?: SelectSubset<T, alimento_doacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alimento_doacao.
     * @param {alimento_doacaoCreateArgs} args - Arguments to create a Alimento_doacao.
     * @example
     * // Create one Alimento_doacao
     * const Alimento_doacao = await prisma.alimento_doacao.create({
     *   data: {
     *     // ... data to create a Alimento_doacao
     *   }
     * })
     * 
     */
    create<T extends alimento_doacaoCreateArgs>(args: SelectSubset<T, alimento_doacaoCreateArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alimento_doacaos.
     * @param {alimento_doacaoCreateManyArgs} args - Arguments to create many Alimento_doacaos.
     * @example
     * // Create many Alimento_doacaos
     * const alimento_doacao = await prisma.alimento_doacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends alimento_doacaoCreateManyArgs>(args?: SelectSubset<T, alimento_doacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alimento_doacao.
     * @param {alimento_doacaoDeleteArgs} args - Arguments to delete one Alimento_doacao.
     * @example
     * // Delete one Alimento_doacao
     * const Alimento_doacao = await prisma.alimento_doacao.delete({
     *   where: {
     *     // ... filter to delete one Alimento_doacao
     *   }
     * })
     * 
     */
    delete<T extends alimento_doacaoDeleteArgs>(args: SelectSubset<T, alimento_doacaoDeleteArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alimento_doacao.
     * @param {alimento_doacaoUpdateArgs} args - Arguments to update one Alimento_doacao.
     * @example
     * // Update one Alimento_doacao
     * const alimento_doacao = await prisma.alimento_doacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends alimento_doacaoUpdateArgs>(args: SelectSubset<T, alimento_doacaoUpdateArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alimento_doacaos.
     * @param {alimento_doacaoDeleteManyArgs} args - Arguments to filter Alimento_doacaos to delete.
     * @example
     * // Delete a few Alimento_doacaos
     * const { count } = await prisma.alimento_doacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends alimento_doacaoDeleteManyArgs>(args?: SelectSubset<T, alimento_doacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alimento_doacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_doacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alimento_doacaos
     * const alimento_doacao = await prisma.alimento_doacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends alimento_doacaoUpdateManyArgs>(args: SelectSubset<T, alimento_doacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alimento_doacao.
     * @param {alimento_doacaoUpsertArgs} args - Arguments to update or create a Alimento_doacao.
     * @example
     * // Update or create a Alimento_doacao
     * const alimento_doacao = await prisma.alimento_doacao.upsert({
     *   create: {
     *     // ... data to create a Alimento_doacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alimento_doacao we want to update
     *   }
     * })
     */
    upsert<T extends alimento_doacaoUpsertArgs>(args: SelectSubset<T, alimento_doacaoUpsertArgs<ExtArgs>>): Prisma__alimento_doacaoClient<$Result.GetResult<Prisma.$alimento_doacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Alimento_doacaos that matches the filter.
     * @param {alimento_doacaoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const alimento_doacao = await prisma.alimento_doacao.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: alimento_doacaoFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Alimento_doacao.
     * @param {alimento_doacaoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const alimento_doacao = await prisma.alimento_doacao.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: alimento_doacaoAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Alimento_doacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_doacaoCountArgs} args - Arguments to filter Alimento_doacaos to count.
     * @example
     * // Count the number of Alimento_doacaos
     * const count = await prisma.alimento_doacao.count({
     *   where: {
     *     // ... the filter for the Alimento_doacaos we want to count
     *   }
     * })
    **/
    count<T extends alimento_doacaoCountArgs>(
      args?: Subset<T, alimento_doacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Alimento_doacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alimento_doacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Alimento_doacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Alimento_doacaoAggregateArgs>(args: Subset<T, Alimento_doacaoAggregateArgs>): Prisma.PrismaPromise<GetAlimento_doacaoAggregateType<T>>

    /**
     * Group by Alimento_doacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alimento_doacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends alimento_doacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: alimento_doacaoGroupByArgs['orderBy'] }
        : { orderBy?: alimento_doacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, alimento_doacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlimento_doacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the alimento_doacao model
   */
  readonly fields: alimento_doacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for alimento_doacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__alimento_doacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the alimento_doacao model
   */ 
  interface alimento_doacaoFieldRefs {
    readonly id: FieldRef<"alimento_doacao", 'String'>
    readonly usuario_id: FieldRef<"alimento_doacao", 'String'>
    readonly alimento_id: FieldRef<"alimento_doacao", 'String'>
    readonly campanha_id: FieldRef<"alimento_doacao", 'String'>
    readonly qt_alimento_doado: FieldRef<"alimento_doacao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * alimento_doacao findUnique
   */
  export type alimento_doacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * Filter, which alimento_doacao to fetch.
     */
    where: alimento_doacaoWhereUniqueInput
  }

  /**
   * alimento_doacao findUniqueOrThrow
   */
  export type alimento_doacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * Filter, which alimento_doacao to fetch.
     */
    where: alimento_doacaoWhereUniqueInput
  }

  /**
   * alimento_doacao findFirst
   */
  export type alimento_doacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * Filter, which alimento_doacao to fetch.
     */
    where?: alimento_doacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_doacaos to fetch.
     */
    orderBy?: alimento_doacaoOrderByWithRelationInput | alimento_doacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alimento_doacaos.
     */
    cursor?: alimento_doacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alimento_doacaos.
     */
    distinct?: Alimento_doacaoScalarFieldEnum | Alimento_doacaoScalarFieldEnum[]
  }

  /**
   * alimento_doacao findFirstOrThrow
   */
  export type alimento_doacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * Filter, which alimento_doacao to fetch.
     */
    where?: alimento_doacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_doacaos to fetch.
     */
    orderBy?: alimento_doacaoOrderByWithRelationInput | alimento_doacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alimento_doacaos.
     */
    cursor?: alimento_doacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alimento_doacaos.
     */
    distinct?: Alimento_doacaoScalarFieldEnum | Alimento_doacaoScalarFieldEnum[]
  }

  /**
   * alimento_doacao findMany
   */
  export type alimento_doacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * Filter, which alimento_doacaos to fetch.
     */
    where?: alimento_doacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alimento_doacaos to fetch.
     */
    orderBy?: alimento_doacaoOrderByWithRelationInput | alimento_doacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing alimento_doacaos.
     */
    cursor?: alimento_doacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alimento_doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alimento_doacaos.
     */
    skip?: number
    distinct?: Alimento_doacaoScalarFieldEnum | Alimento_doacaoScalarFieldEnum[]
  }

  /**
   * alimento_doacao create
   */
  export type alimento_doacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * The data needed to create a alimento_doacao.
     */
    data: XOR<alimento_doacaoCreateInput, alimento_doacaoUncheckedCreateInput>
  }

  /**
   * alimento_doacao createMany
   */
  export type alimento_doacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many alimento_doacaos.
     */
    data: alimento_doacaoCreateManyInput | alimento_doacaoCreateManyInput[]
  }

  /**
   * alimento_doacao update
   */
  export type alimento_doacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * The data needed to update a alimento_doacao.
     */
    data: XOR<alimento_doacaoUpdateInput, alimento_doacaoUncheckedUpdateInput>
    /**
     * Choose, which alimento_doacao to update.
     */
    where: alimento_doacaoWhereUniqueInput
  }

  /**
   * alimento_doacao updateMany
   */
  export type alimento_doacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update alimento_doacaos.
     */
    data: XOR<alimento_doacaoUpdateManyMutationInput, alimento_doacaoUncheckedUpdateManyInput>
    /**
     * Filter which alimento_doacaos to update
     */
    where?: alimento_doacaoWhereInput
  }

  /**
   * alimento_doacao upsert
   */
  export type alimento_doacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * The filter to search for the alimento_doacao to update in case it exists.
     */
    where: alimento_doacaoWhereUniqueInput
    /**
     * In case the alimento_doacao found by the `where` argument doesn't exist, create a new alimento_doacao with this data.
     */
    create: XOR<alimento_doacaoCreateInput, alimento_doacaoUncheckedCreateInput>
    /**
     * In case the alimento_doacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<alimento_doacaoUpdateInput, alimento_doacaoUncheckedUpdateInput>
  }

  /**
   * alimento_doacao delete
   */
  export type alimento_doacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
    /**
     * Filter which alimento_doacao to delete.
     */
    where: alimento_doacaoWhereUniqueInput
  }

  /**
   * alimento_doacao deleteMany
   */
  export type alimento_doacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alimento_doacaos to delete
     */
    where?: alimento_doacaoWhereInput
  }

  /**
   * alimento_doacao findRaw
   */
  export type alimento_doacaoFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * alimento_doacao aggregateRaw
   */
  export type alimento_doacaoAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * alimento_doacao without action
   */
  export type alimento_doacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alimento_doacao
     */
    select?: alimento_doacaoSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const AlimentoScalarFieldEnum: {
    id: 'id',
    nm_alimento: 'nm_alimento',
    sg_medida_alimento: 'sg_medida_alimento',
    nm_tipo_alimento: 'nm_tipo_alimento',
    cd_tipo_alimento: 'cd_tipo_alimento'
  };

  export type AlimentoScalarFieldEnum = (typeof AlimentoScalarFieldEnum)[keyof typeof AlimentoScalarFieldEnum]


  export const CampanhaScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    nm_titulo_campanha: 'nm_titulo_campanha',
    dt_encerramento_campanha: 'dt_encerramento_campanha',
    ts_criacao_campanha: 'ts_criacao_campanha',
    nm_cidade_campanha: 'nm_cidade_campanha',
    sg_estado_campanha: 'sg_estado_campanha',
    ds_acao_campanha: 'ds_acao_campanha',
    cd_imagem_campanha: 'cd_imagem_campanha',
    fg_campanha_ativa: 'fg_campanha_ativa'
  };

  export type CampanhaScalarFieldEnum = (typeof CampanhaScalarFieldEnum)[keyof typeof CampanhaScalarFieldEnum]


  export const Alimento_campanhaScalarFieldEnum: {
    id: 'id',
    alimento_id: 'alimento_id',
    campanha_id: 'campanha_id',
    qt_alimento_meta: 'qt_alimento_meta'
  };

  export type Alimento_campanhaScalarFieldEnum = (typeof Alimento_campanhaScalarFieldEnum)[keyof typeof Alimento_campanhaScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    tipo_usuario: 'tipo_usuario',
    nm_usuario: 'nm_usuario',
    ch_cpf_usuario: 'ch_cpf_usuario',
    ch_cnpj_usuario: 'ch_cnpj_usuario',
    dt_nascimento_usuario: 'dt_nascimento_usuario',
    nr_celular_usuario: 'nr_celular_usuario',
    sg_estado_usuario: 'sg_estado_usuario',
    nm_cidade_usuario: 'nm_cidade_usuario',
    cd_foto_usuario: 'cd_foto_usuario',
    cd_senha_usuario: 'cd_senha_usuario',
    cd_email_usuario: 'cd_email_usuario',
    fg_admin: 'fg_admin',
    qt_advertencias_usuario: 'qt_advertencias_usuario',
    fg_usuario_deletado: 'fg_usuario_deletado'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const Alimento_doacaoScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    alimento_id: 'alimento_id',
    campanha_id: 'campanha_id',
    qt_alimento_doado: 'qt_alimento_doado'
  };

  export type Alimento_doacaoScalarFieldEnum = (typeof Alimento_doacaoScalarFieldEnum)[keyof typeof Alimento_doacaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type alimentoWhereInput = {
    AND?: alimentoWhereInput | alimentoWhereInput[]
    OR?: alimentoWhereInput[]
    NOT?: alimentoWhereInput | alimentoWhereInput[]
    id?: StringFilter<"alimento"> | string
    nm_alimento?: StringFilter<"alimento"> | string
    sg_medida_alimento?: StringFilter<"alimento"> | string
    nm_tipo_alimento?: StringFilter<"alimento"> | string
    cd_tipo_alimento?: IntFilter<"alimento"> | number
  }

  export type alimentoOrderByWithRelationInput = {
    id?: SortOrder
    nm_alimento?: SortOrder
    sg_medida_alimento?: SortOrder
    nm_tipo_alimento?: SortOrder
    cd_tipo_alimento?: SortOrder
  }

  export type alimentoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: alimentoWhereInput | alimentoWhereInput[]
    OR?: alimentoWhereInput[]
    NOT?: alimentoWhereInput | alimentoWhereInput[]
    nm_alimento?: StringFilter<"alimento"> | string
    sg_medida_alimento?: StringFilter<"alimento"> | string
    nm_tipo_alimento?: StringFilter<"alimento"> | string
    cd_tipo_alimento?: IntFilter<"alimento"> | number
  }, "id">

  export type alimentoOrderByWithAggregationInput = {
    id?: SortOrder
    nm_alimento?: SortOrder
    sg_medida_alimento?: SortOrder
    nm_tipo_alimento?: SortOrder
    cd_tipo_alimento?: SortOrder
    _count?: alimentoCountOrderByAggregateInput
    _avg?: alimentoAvgOrderByAggregateInput
    _max?: alimentoMaxOrderByAggregateInput
    _min?: alimentoMinOrderByAggregateInput
    _sum?: alimentoSumOrderByAggregateInput
  }

  export type alimentoScalarWhereWithAggregatesInput = {
    AND?: alimentoScalarWhereWithAggregatesInput | alimentoScalarWhereWithAggregatesInput[]
    OR?: alimentoScalarWhereWithAggregatesInput[]
    NOT?: alimentoScalarWhereWithAggregatesInput | alimentoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"alimento"> | string
    nm_alimento?: StringWithAggregatesFilter<"alimento"> | string
    sg_medida_alimento?: StringWithAggregatesFilter<"alimento"> | string
    nm_tipo_alimento?: StringWithAggregatesFilter<"alimento"> | string
    cd_tipo_alimento?: IntWithAggregatesFilter<"alimento"> | number
  }

  export type campanhaWhereInput = {
    AND?: campanhaWhereInput | campanhaWhereInput[]
    OR?: campanhaWhereInput[]
    NOT?: campanhaWhereInput | campanhaWhereInput[]
    id?: StringFilter<"campanha"> | string
    usuario_id?: StringFilter<"campanha"> | string
    nm_titulo_campanha?: StringFilter<"campanha"> | string
    dt_encerramento_campanha?: DateTimeFilter<"campanha"> | Date | string
    ts_criacao_campanha?: DateTimeFilter<"campanha"> | Date | string
    nm_cidade_campanha?: StringFilter<"campanha"> | string
    sg_estado_campanha?: StringFilter<"campanha"> | string
    ds_acao_campanha?: StringFilter<"campanha"> | string
    cd_imagem_campanha?: StringFilter<"campanha"> | string
    fg_campanha_ativa?: BoolFilter<"campanha"> | boolean
  }

  export type campanhaOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nm_titulo_campanha?: SortOrder
    dt_encerramento_campanha?: SortOrder
    ts_criacao_campanha?: SortOrder
    nm_cidade_campanha?: SortOrder
    sg_estado_campanha?: SortOrder
    ds_acao_campanha?: SortOrder
    cd_imagem_campanha?: SortOrder
    fg_campanha_ativa?: SortOrder
  }

  export type campanhaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: campanhaWhereInput | campanhaWhereInput[]
    OR?: campanhaWhereInput[]
    NOT?: campanhaWhereInput | campanhaWhereInput[]
    usuario_id?: StringFilter<"campanha"> | string
    nm_titulo_campanha?: StringFilter<"campanha"> | string
    dt_encerramento_campanha?: DateTimeFilter<"campanha"> | Date | string
    ts_criacao_campanha?: DateTimeFilter<"campanha"> | Date | string
    nm_cidade_campanha?: StringFilter<"campanha"> | string
    sg_estado_campanha?: StringFilter<"campanha"> | string
    ds_acao_campanha?: StringFilter<"campanha"> | string
    cd_imagem_campanha?: StringFilter<"campanha"> | string
    fg_campanha_ativa?: BoolFilter<"campanha"> | boolean
  }, "id">

  export type campanhaOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nm_titulo_campanha?: SortOrder
    dt_encerramento_campanha?: SortOrder
    ts_criacao_campanha?: SortOrder
    nm_cidade_campanha?: SortOrder
    sg_estado_campanha?: SortOrder
    ds_acao_campanha?: SortOrder
    cd_imagem_campanha?: SortOrder
    fg_campanha_ativa?: SortOrder
    _count?: campanhaCountOrderByAggregateInput
    _max?: campanhaMaxOrderByAggregateInput
    _min?: campanhaMinOrderByAggregateInput
  }

  export type campanhaScalarWhereWithAggregatesInput = {
    AND?: campanhaScalarWhereWithAggregatesInput | campanhaScalarWhereWithAggregatesInput[]
    OR?: campanhaScalarWhereWithAggregatesInput[]
    NOT?: campanhaScalarWhereWithAggregatesInput | campanhaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"campanha"> | string
    usuario_id?: StringWithAggregatesFilter<"campanha"> | string
    nm_titulo_campanha?: StringWithAggregatesFilter<"campanha"> | string
    dt_encerramento_campanha?: DateTimeWithAggregatesFilter<"campanha"> | Date | string
    ts_criacao_campanha?: DateTimeWithAggregatesFilter<"campanha"> | Date | string
    nm_cidade_campanha?: StringWithAggregatesFilter<"campanha"> | string
    sg_estado_campanha?: StringWithAggregatesFilter<"campanha"> | string
    ds_acao_campanha?: StringWithAggregatesFilter<"campanha"> | string
    cd_imagem_campanha?: StringWithAggregatesFilter<"campanha"> | string
    fg_campanha_ativa?: BoolWithAggregatesFilter<"campanha"> | boolean
  }

  export type alimento_campanhaWhereInput = {
    AND?: alimento_campanhaWhereInput | alimento_campanhaWhereInput[]
    OR?: alimento_campanhaWhereInput[]
    NOT?: alimento_campanhaWhereInput | alimento_campanhaWhereInput[]
    id?: StringFilter<"alimento_campanha"> | string
    alimento_id?: StringFilter<"alimento_campanha"> | string
    campanha_id?: StringFilter<"alimento_campanha"> | string
    qt_alimento_meta?: IntFilter<"alimento_campanha"> | number
  }

  export type alimento_campanhaOrderByWithRelationInput = {
    id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_meta?: SortOrder
  }

  export type alimento_campanhaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: alimento_campanhaWhereInput | alimento_campanhaWhereInput[]
    OR?: alimento_campanhaWhereInput[]
    NOT?: alimento_campanhaWhereInput | alimento_campanhaWhereInput[]
    alimento_id?: StringFilter<"alimento_campanha"> | string
    campanha_id?: StringFilter<"alimento_campanha"> | string
    qt_alimento_meta?: IntFilter<"alimento_campanha"> | number
  }, "id">

  export type alimento_campanhaOrderByWithAggregationInput = {
    id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_meta?: SortOrder
    _count?: alimento_campanhaCountOrderByAggregateInput
    _avg?: alimento_campanhaAvgOrderByAggregateInput
    _max?: alimento_campanhaMaxOrderByAggregateInput
    _min?: alimento_campanhaMinOrderByAggregateInput
    _sum?: alimento_campanhaSumOrderByAggregateInput
  }

  export type alimento_campanhaScalarWhereWithAggregatesInput = {
    AND?: alimento_campanhaScalarWhereWithAggregatesInput | alimento_campanhaScalarWhereWithAggregatesInput[]
    OR?: alimento_campanhaScalarWhereWithAggregatesInput[]
    NOT?: alimento_campanhaScalarWhereWithAggregatesInput | alimento_campanhaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"alimento_campanha"> | string
    alimento_id?: StringWithAggregatesFilter<"alimento_campanha"> | string
    campanha_id?: StringWithAggregatesFilter<"alimento_campanha"> | string
    qt_alimento_meta?: IntWithAggregatesFilter<"alimento_campanha"> | number
  }

  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    id?: StringFilter<"usuario"> | string
    tipo_usuario?: StringNullableFilter<"usuario"> | string | null
    nm_usuario?: StringFilter<"usuario"> | string
    ch_cpf_usuario?: StringNullableFilter<"usuario"> | string | null
    ch_cnpj_usuario?: StringNullableFilter<"usuario"> | string | null
    dt_nascimento_usuario?: DateTimeNullableFilter<"usuario"> | Date | string | null
    nr_celular_usuario?: StringFilter<"usuario"> | string
    sg_estado_usuario?: StringFilter<"usuario"> | string
    nm_cidade_usuario?: StringFilter<"usuario"> | string
    cd_foto_usuario?: StringFilter<"usuario"> | string
    cd_senha_usuario?: StringFilter<"usuario"> | string
    cd_email_usuario?: StringFilter<"usuario"> | string
    fg_admin?: IntFilter<"usuario"> | number
    qt_advertencias_usuario?: IntFilter<"usuario"> | number
    fg_usuario_deletado?: IntFilter<"usuario"> | number
  }

  export type usuarioOrderByWithRelationInput = {
    id?: SortOrder
    tipo_usuario?: SortOrder
    nm_usuario?: SortOrder
    ch_cpf_usuario?: SortOrder
    ch_cnpj_usuario?: SortOrder
    dt_nascimento_usuario?: SortOrder
    nr_celular_usuario?: SortOrder
    sg_estado_usuario?: SortOrder
    nm_cidade_usuario?: SortOrder
    cd_foto_usuario?: SortOrder
    cd_senha_usuario?: SortOrder
    cd_email_usuario?: SortOrder
    fg_admin?: SortOrder
    qt_advertencias_usuario?: SortOrder
    fg_usuario_deletado?: SortOrder
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    tipo_usuario?: StringNullableFilter<"usuario"> | string | null
    nm_usuario?: StringFilter<"usuario"> | string
    ch_cpf_usuario?: StringNullableFilter<"usuario"> | string | null
    ch_cnpj_usuario?: StringNullableFilter<"usuario"> | string | null
    dt_nascimento_usuario?: DateTimeNullableFilter<"usuario"> | Date | string | null
    nr_celular_usuario?: StringFilter<"usuario"> | string
    sg_estado_usuario?: StringFilter<"usuario"> | string
    nm_cidade_usuario?: StringFilter<"usuario"> | string
    cd_foto_usuario?: StringFilter<"usuario"> | string
    cd_senha_usuario?: StringFilter<"usuario"> | string
    cd_email_usuario?: StringFilter<"usuario"> | string
    fg_admin?: IntFilter<"usuario"> | number
    qt_advertencias_usuario?: IntFilter<"usuario"> | number
    fg_usuario_deletado?: IntFilter<"usuario"> | number
  }, "id">

  export type usuarioOrderByWithAggregationInput = {
    id?: SortOrder
    tipo_usuario?: SortOrder
    nm_usuario?: SortOrder
    ch_cpf_usuario?: SortOrder
    ch_cnpj_usuario?: SortOrder
    dt_nascimento_usuario?: SortOrder
    nr_celular_usuario?: SortOrder
    sg_estado_usuario?: SortOrder
    nm_cidade_usuario?: SortOrder
    cd_foto_usuario?: SortOrder
    cd_senha_usuario?: SortOrder
    cd_email_usuario?: SortOrder
    fg_admin?: SortOrder
    qt_advertencias_usuario?: SortOrder
    fg_usuario_deletado?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"usuario"> | string
    tipo_usuario?: StringNullableWithAggregatesFilter<"usuario"> | string | null
    nm_usuario?: StringWithAggregatesFilter<"usuario"> | string
    ch_cpf_usuario?: StringNullableWithAggregatesFilter<"usuario"> | string | null
    ch_cnpj_usuario?: StringNullableWithAggregatesFilter<"usuario"> | string | null
    dt_nascimento_usuario?: DateTimeNullableWithAggregatesFilter<"usuario"> | Date | string | null
    nr_celular_usuario?: StringWithAggregatesFilter<"usuario"> | string
    sg_estado_usuario?: StringWithAggregatesFilter<"usuario"> | string
    nm_cidade_usuario?: StringWithAggregatesFilter<"usuario"> | string
    cd_foto_usuario?: StringWithAggregatesFilter<"usuario"> | string
    cd_senha_usuario?: StringWithAggregatesFilter<"usuario"> | string
    cd_email_usuario?: StringWithAggregatesFilter<"usuario"> | string
    fg_admin?: IntWithAggregatesFilter<"usuario"> | number
    qt_advertencias_usuario?: IntWithAggregatesFilter<"usuario"> | number
    fg_usuario_deletado?: IntWithAggregatesFilter<"usuario"> | number
  }

  export type alimento_doacaoWhereInput = {
    AND?: alimento_doacaoWhereInput | alimento_doacaoWhereInput[]
    OR?: alimento_doacaoWhereInput[]
    NOT?: alimento_doacaoWhereInput | alimento_doacaoWhereInput[]
    id?: StringFilter<"alimento_doacao"> | string
    usuario_id?: StringFilter<"alimento_doacao"> | string
    alimento_id?: StringFilter<"alimento_doacao"> | string
    campanha_id?: StringFilter<"alimento_doacao"> | string
    qt_alimento_doado?: IntFilter<"alimento_doacao"> | number
  }

  export type alimento_doacaoOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_doado?: SortOrder
  }

  export type alimento_doacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: alimento_doacaoWhereInput | alimento_doacaoWhereInput[]
    OR?: alimento_doacaoWhereInput[]
    NOT?: alimento_doacaoWhereInput | alimento_doacaoWhereInput[]
    usuario_id?: StringFilter<"alimento_doacao"> | string
    alimento_id?: StringFilter<"alimento_doacao"> | string
    campanha_id?: StringFilter<"alimento_doacao"> | string
    qt_alimento_doado?: IntFilter<"alimento_doacao"> | number
  }, "id">

  export type alimento_doacaoOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_doado?: SortOrder
    _count?: alimento_doacaoCountOrderByAggregateInput
    _avg?: alimento_doacaoAvgOrderByAggregateInput
    _max?: alimento_doacaoMaxOrderByAggregateInput
    _min?: alimento_doacaoMinOrderByAggregateInput
    _sum?: alimento_doacaoSumOrderByAggregateInput
  }

  export type alimento_doacaoScalarWhereWithAggregatesInput = {
    AND?: alimento_doacaoScalarWhereWithAggregatesInput | alimento_doacaoScalarWhereWithAggregatesInput[]
    OR?: alimento_doacaoScalarWhereWithAggregatesInput[]
    NOT?: alimento_doacaoScalarWhereWithAggregatesInput | alimento_doacaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"alimento_doacao"> | string
    usuario_id?: StringWithAggregatesFilter<"alimento_doacao"> | string
    alimento_id?: StringWithAggregatesFilter<"alimento_doacao"> | string
    campanha_id?: StringWithAggregatesFilter<"alimento_doacao"> | string
    qt_alimento_doado?: IntWithAggregatesFilter<"alimento_doacao"> | number
  }

  export type alimentoCreateInput = {
    id?: string
    nm_alimento: string
    sg_medida_alimento: string
    nm_tipo_alimento: string
    cd_tipo_alimento: number
  }

  export type alimentoUncheckedCreateInput = {
    id?: string
    nm_alimento: string
    sg_medida_alimento: string
    nm_tipo_alimento: string
    cd_tipo_alimento: number
  }

  export type alimentoUpdateInput = {
    nm_alimento?: StringFieldUpdateOperationsInput | string
    sg_medida_alimento?: StringFieldUpdateOperationsInput | string
    nm_tipo_alimento?: StringFieldUpdateOperationsInput | string
    cd_tipo_alimento?: IntFieldUpdateOperationsInput | number
  }

  export type alimentoUncheckedUpdateInput = {
    nm_alimento?: StringFieldUpdateOperationsInput | string
    sg_medida_alimento?: StringFieldUpdateOperationsInput | string
    nm_tipo_alimento?: StringFieldUpdateOperationsInput | string
    cd_tipo_alimento?: IntFieldUpdateOperationsInput | number
  }

  export type alimentoCreateManyInput = {
    id?: string
    nm_alimento: string
    sg_medida_alimento: string
    nm_tipo_alimento: string
    cd_tipo_alimento: number
  }

  export type alimentoUpdateManyMutationInput = {
    nm_alimento?: StringFieldUpdateOperationsInput | string
    sg_medida_alimento?: StringFieldUpdateOperationsInput | string
    nm_tipo_alimento?: StringFieldUpdateOperationsInput | string
    cd_tipo_alimento?: IntFieldUpdateOperationsInput | number
  }

  export type alimentoUncheckedUpdateManyInput = {
    nm_alimento?: StringFieldUpdateOperationsInput | string
    sg_medida_alimento?: StringFieldUpdateOperationsInput | string
    nm_tipo_alimento?: StringFieldUpdateOperationsInput | string
    cd_tipo_alimento?: IntFieldUpdateOperationsInput | number
  }

  export type campanhaCreateInput = {
    id?: string
    usuario_id: string
    nm_titulo_campanha: string
    dt_encerramento_campanha: Date | string
    ts_criacao_campanha?: Date | string
    nm_cidade_campanha: string
    sg_estado_campanha: string
    ds_acao_campanha: string
    cd_imagem_campanha?: string
    fg_campanha_ativa: boolean
  }

  export type campanhaUncheckedCreateInput = {
    id?: string
    usuario_id: string
    nm_titulo_campanha: string
    dt_encerramento_campanha: Date | string
    ts_criacao_campanha?: Date | string
    nm_cidade_campanha: string
    sg_estado_campanha: string
    ds_acao_campanha: string
    cd_imagem_campanha?: string
    fg_campanha_ativa: boolean
  }

  export type campanhaUpdateInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    nm_titulo_campanha?: StringFieldUpdateOperationsInput | string
    dt_encerramento_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    ts_criacao_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    nm_cidade_campanha?: StringFieldUpdateOperationsInput | string
    sg_estado_campanha?: StringFieldUpdateOperationsInput | string
    ds_acao_campanha?: StringFieldUpdateOperationsInput | string
    cd_imagem_campanha?: StringFieldUpdateOperationsInput | string
    fg_campanha_ativa?: BoolFieldUpdateOperationsInput | boolean
  }

  export type campanhaUncheckedUpdateInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    nm_titulo_campanha?: StringFieldUpdateOperationsInput | string
    dt_encerramento_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    ts_criacao_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    nm_cidade_campanha?: StringFieldUpdateOperationsInput | string
    sg_estado_campanha?: StringFieldUpdateOperationsInput | string
    ds_acao_campanha?: StringFieldUpdateOperationsInput | string
    cd_imagem_campanha?: StringFieldUpdateOperationsInput | string
    fg_campanha_ativa?: BoolFieldUpdateOperationsInput | boolean
  }

  export type campanhaCreateManyInput = {
    id?: string
    usuario_id: string
    nm_titulo_campanha: string
    dt_encerramento_campanha: Date | string
    ts_criacao_campanha?: Date | string
    nm_cidade_campanha: string
    sg_estado_campanha: string
    ds_acao_campanha: string
    cd_imagem_campanha?: string
    fg_campanha_ativa: boolean
  }

  export type campanhaUpdateManyMutationInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    nm_titulo_campanha?: StringFieldUpdateOperationsInput | string
    dt_encerramento_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    ts_criacao_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    nm_cidade_campanha?: StringFieldUpdateOperationsInput | string
    sg_estado_campanha?: StringFieldUpdateOperationsInput | string
    ds_acao_campanha?: StringFieldUpdateOperationsInput | string
    cd_imagem_campanha?: StringFieldUpdateOperationsInput | string
    fg_campanha_ativa?: BoolFieldUpdateOperationsInput | boolean
  }

  export type campanhaUncheckedUpdateManyInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    nm_titulo_campanha?: StringFieldUpdateOperationsInput | string
    dt_encerramento_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    ts_criacao_campanha?: DateTimeFieldUpdateOperationsInput | Date | string
    nm_cidade_campanha?: StringFieldUpdateOperationsInput | string
    sg_estado_campanha?: StringFieldUpdateOperationsInput | string
    ds_acao_campanha?: StringFieldUpdateOperationsInput | string
    cd_imagem_campanha?: StringFieldUpdateOperationsInput | string
    fg_campanha_ativa?: BoolFieldUpdateOperationsInput | boolean
  }

  export type alimento_campanhaCreateInput = {
    id?: string
    alimento_id: string
    campanha_id: string
    qt_alimento_meta: number
  }

  export type alimento_campanhaUncheckedCreateInput = {
    id?: string
    alimento_id: string
    campanha_id: string
    qt_alimento_meta: number
  }

  export type alimento_campanhaUpdateInput = {
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_meta?: IntFieldUpdateOperationsInput | number
  }

  export type alimento_campanhaUncheckedUpdateInput = {
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_meta?: IntFieldUpdateOperationsInput | number
  }

  export type alimento_campanhaCreateManyInput = {
    id?: string
    alimento_id: string
    campanha_id: string
    qt_alimento_meta: number
  }

  export type alimento_campanhaUpdateManyMutationInput = {
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_meta?: IntFieldUpdateOperationsInput | number
  }

  export type alimento_campanhaUncheckedUpdateManyInput = {
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_meta?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioCreateInput = {
    id?: string
    tipo_usuario?: string | null
    nm_usuario: string
    ch_cpf_usuario?: string | null
    ch_cnpj_usuario?: string | null
    dt_nascimento_usuario?: Date | string | null
    nr_celular_usuario: string
    sg_estado_usuario: string
    nm_cidade_usuario: string
    cd_foto_usuario?: string
    cd_senha_usuario: string
    cd_email_usuario: string
    fg_admin?: number
    qt_advertencias_usuario?: number
    fg_usuario_deletado?: number
  }

  export type usuarioUncheckedCreateInput = {
    id?: string
    tipo_usuario?: string | null
    nm_usuario: string
    ch_cpf_usuario?: string | null
    ch_cnpj_usuario?: string | null
    dt_nascimento_usuario?: Date | string | null
    nr_celular_usuario: string
    sg_estado_usuario: string
    nm_cidade_usuario: string
    cd_foto_usuario?: string
    cd_senha_usuario: string
    cd_email_usuario: string
    fg_admin?: number
    qt_advertencias_usuario?: number
    fg_usuario_deletado?: number
  }

  export type usuarioUpdateInput = {
    tipo_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    nm_usuario?: StringFieldUpdateOperationsInput | string
    ch_cpf_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    ch_cnpj_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    dt_nascimento_usuario?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nr_celular_usuario?: StringFieldUpdateOperationsInput | string
    sg_estado_usuario?: StringFieldUpdateOperationsInput | string
    nm_cidade_usuario?: StringFieldUpdateOperationsInput | string
    cd_foto_usuario?: StringFieldUpdateOperationsInput | string
    cd_senha_usuario?: StringFieldUpdateOperationsInput | string
    cd_email_usuario?: StringFieldUpdateOperationsInput | string
    fg_admin?: IntFieldUpdateOperationsInput | number
    qt_advertencias_usuario?: IntFieldUpdateOperationsInput | number
    fg_usuario_deletado?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioUncheckedUpdateInput = {
    tipo_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    nm_usuario?: StringFieldUpdateOperationsInput | string
    ch_cpf_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    ch_cnpj_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    dt_nascimento_usuario?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nr_celular_usuario?: StringFieldUpdateOperationsInput | string
    sg_estado_usuario?: StringFieldUpdateOperationsInput | string
    nm_cidade_usuario?: StringFieldUpdateOperationsInput | string
    cd_foto_usuario?: StringFieldUpdateOperationsInput | string
    cd_senha_usuario?: StringFieldUpdateOperationsInput | string
    cd_email_usuario?: StringFieldUpdateOperationsInput | string
    fg_admin?: IntFieldUpdateOperationsInput | number
    qt_advertencias_usuario?: IntFieldUpdateOperationsInput | number
    fg_usuario_deletado?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioCreateManyInput = {
    id?: string
    tipo_usuario?: string | null
    nm_usuario: string
    ch_cpf_usuario?: string | null
    ch_cnpj_usuario?: string | null
    dt_nascimento_usuario?: Date | string | null
    nr_celular_usuario: string
    sg_estado_usuario: string
    nm_cidade_usuario: string
    cd_foto_usuario?: string
    cd_senha_usuario: string
    cd_email_usuario: string
    fg_admin?: number
    qt_advertencias_usuario?: number
    fg_usuario_deletado?: number
  }

  export type usuarioUpdateManyMutationInput = {
    tipo_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    nm_usuario?: StringFieldUpdateOperationsInput | string
    ch_cpf_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    ch_cnpj_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    dt_nascimento_usuario?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nr_celular_usuario?: StringFieldUpdateOperationsInput | string
    sg_estado_usuario?: StringFieldUpdateOperationsInput | string
    nm_cidade_usuario?: StringFieldUpdateOperationsInput | string
    cd_foto_usuario?: StringFieldUpdateOperationsInput | string
    cd_senha_usuario?: StringFieldUpdateOperationsInput | string
    cd_email_usuario?: StringFieldUpdateOperationsInput | string
    fg_admin?: IntFieldUpdateOperationsInput | number
    qt_advertencias_usuario?: IntFieldUpdateOperationsInput | number
    fg_usuario_deletado?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioUncheckedUpdateManyInput = {
    tipo_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    nm_usuario?: StringFieldUpdateOperationsInput | string
    ch_cpf_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    ch_cnpj_usuario?: NullableStringFieldUpdateOperationsInput | string | null
    dt_nascimento_usuario?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nr_celular_usuario?: StringFieldUpdateOperationsInput | string
    sg_estado_usuario?: StringFieldUpdateOperationsInput | string
    nm_cidade_usuario?: StringFieldUpdateOperationsInput | string
    cd_foto_usuario?: StringFieldUpdateOperationsInput | string
    cd_senha_usuario?: StringFieldUpdateOperationsInput | string
    cd_email_usuario?: StringFieldUpdateOperationsInput | string
    fg_admin?: IntFieldUpdateOperationsInput | number
    qt_advertencias_usuario?: IntFieldUpdateOperationsInput | number
    fg_usuario_deletado?: IntFieldUpdateOperationsInput | number
  }

  export type alimento_doacaoCreateInput = {
    id?: string
    usuario_id: string
    alimento_id: string
    campanha_id: string
    qt_alimento_doado: number
  }

  export type alimento_doacaoUncheckedCreateInput = {
    id?: string
    usuario_id: string
    alimento_id: string
    campanha_id: string
    qt_alimento_doado: number
  }

  export type alimento_doacaoUpdateInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_doado?: IntFieldUpdateOperationsInput | number
  }

  export type alimento_doacaoUncheckedUpdateInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_doado?: IntFieldUpdateOperationsInput | number
  }

  export type alimento_doacaoCreateManyInput = {
    id?: string
    usuario_id: string
    alimento_id: string
    campanha_id: string
    qt_alimento_doado: number
  }

  export type alimento_doacaoUpdateManyMutationInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_doado?: IntFieldUpdateOperationsInput | number
  }

  export type alimento_doacaoUncheckedUpdateManyInput = {
    usuario_id?: StringFieldUpdateOperationsInput | string
    alimento_id?: StringFieldUpdateOperationsInput | string
    campanha_id?: StringFieldUpdateOperationsInput | string
    qt_alimento_doado?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type alimentoCountOrderByAggregateInput = {
    id?: SortOrder
    nm_alimento?: SortOrder
    sg_medida_alimento?: SortOrder
    nm_tipo_alimento?: SortOrder
    cd_tipo_alimento?: SortOrder
  }

  export type alimentoAvgOrderByAggregateInput = {
    cd_tipo_alimento?: SortOrder
  }

  export type alimentoMaxOrderByAggregateInput = {
    id?: SortOrder
    nm_alimento?: SortOrder
    sg_medida_alimento?: SortOrder
    nm_tipo_alimento?: SortOrder
    cd_tipo_alimento?: SortOrder
  }

  export type alimentoMinOrderByAggregateInput = {
    id?: SortOrder
    nm_alimento?: SortOrder
    sg_medida_alimento?: SortOrder
    nm_tipo_alimento?: SortOrder
    cd_tipo_alimento?: SortOrder
  }

  export type alimentoSumOrderByAggregateInput = {
    cd_tipo_alimento?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type campanhaCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nm_titulo_campanha?: SortOrder
    dt_encerramento_campanha?: SortOrder
    ts_criacao_campanha?: SortOrder
    nm_cidade_campanha?: SortOrder
    sg_estado_campanha?: SortOrder
    ds_acao_campanha?: SortOrder
    cd_imagem_campanha?: SortOrder
    fg_campanha_ativa?: SortOrder
  }

  export type campanhaMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nm_titulo_campanha?: SortOrder
    dt_encerramento_campanha?: SortOrder
    ts_criacao_campanha?: SortOrder
    nm_cidade_campanha?: SortOrder
    sg_estado_campanha?: SortOrder
    ds_acao_campanha?: SortOrder
    cd_imagem_campanha?: SortOrder
    fg_campanha_ativa?: SortOrder
  }

  export type campanhaMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nm_titulo_campanha?: SortOrder
    dt_encerramento_campanha?: SortOrder
    ts_criacao_campanha?: SortOrder
    nm_cidade_campanha?: SortOrder
    sg_estado_campanha?: SortOrder
    ds_acao_campanha?: SortOrder
    cd_imagem_campanha?: SortOrder
    fg_campanha_ativa?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type alimento_campanhaCountOrderByAggregateInput = {
    id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_meta?: SortOrder
  }

  export type alimento_campanhaAvgOrderByAggregateInput = {
    qt_alimento_meta?: SortOrder
  }

  export type alimento_campanhaMaxOrderByAggregateInput = {
    id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_meta?: SortOrder
  }

  export type alimento_campanhaMinOrderByAggregateInput = {
    id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_meta?: SortOrder
  }

  export type alimento_campanhaSumOrderByAggregateInput = {
    qt_alimento_meta?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type usuarioCountOrderByAggregateInput = {
    id?: SortOrder
    tipo_usuario?: SortOrder
    nm_usuario?: SortOrder
    ch_cpf_usuario?: SortOrder
    ch_cnpj_usuario?: SortOrder
    dt_nascimento_usuario?: SortOrder
    nr_celular_usuario?: SortOrder
    sg_estado_usuario?: SortOrder
    nm_cidade_usuario?: SortOrder
    cd_foto_usuario?: SortOrder
    cd_senha_usuario?: SortOrder
    cd_email_usuario?: SortOrder
    fg_admin?: SortOrder
    qt_advertencias_usuario?: SortOrder
    fg_usuario_deletado?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    fg_admin?: SortOrder
    qt_advertencias_usuario?: SortOrder
    fg_usuario_deletado?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo_usuario?: SortOrder
    nm_usuario?: SortOrder
    ch_cpf_usuario?: SortOrder
    ch_cnpj_usuario?: SortOrder
    dt_nascimento_usuario?: SortOrder
    nr_celular_usuario?: SortOrder
    sg_estado_usuario?: SortOrder
    nm_cidade_usuario?: SortOrder
    cd_foto_usuario?: SortOrder
    cd_senha_usuario?: SortOrder
    cd_email_usuario?: SortOrder
    fg_admin?: SortOrder
    qt_advertencias_usuario?: SortOrder
    fg_usuario_deletado?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    id?: SortOrder
    tipo_usuario?: SortOrder
    nm_usuario?: SortOrder
    ch_cpf_usuario?: SortOrder
    ch_cnpj_usuario?: SortOrder
    dt_nascimento_usuario?: SortOrder
    nr_celular_usuario?: SortOrder
    sg_estado_usuario?: SortOrder
    nm_cidade_usuario?: SortOrder
    cd_foto_usuario?: SortOrder
    cd_senha_usuario?: SortOrder
    cd_email_usuario?: SortOrder
    fg_admin?: SortOrder
    qt_advertencias_usuario?: SortOrder
    fg_usuario_deletado?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    fg_admin?: SortOrder
    qt_advertencias_usuario?: SortOrder
    fg_usuario_deletado?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type alimento_doacaoCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_doado?: SortOrder
  }

  export type alimento_doacaoAvgOrderByAggregateInput = {
    qt_alimento_doado?: SortOrder
  }

  export type alimento_doacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_doado?: SortOrder
  }

  export type alimento_doacaoMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    alimento_id?: SortOrder
    campanha_id?: SortOrder
    qt_alimento_doado?: SortOrder
  }

  export type alimento_doacaoSumOrderByAggregateInput = {
    qt_alimento_doado?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use alimentoDefaultArgs instead
     */
    export type alimentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = alimentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use campanhaDefaultArgs instead
     */
    export type campanhaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = campanhaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use alimento_campanhaDefaultArgs instead
     */
    export type alimento_campanhaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = alimento_campanhaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use alimento_doacaoDefaultArgs instead
     */
    export type alimento_doacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = alimento_doacaoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}